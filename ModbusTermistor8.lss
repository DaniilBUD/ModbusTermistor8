
AVRASM ver. 2.2.8  D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm Tue Oct 25 15:52:18 2022

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(1): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(1): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
                                 
                                 .include "m8Adef.inc" ;Подключение стандартной библиотеки для работы с Atmega8
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #define _M8ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8A
                                 #pragma AVRPART ADMIN PART_NAME ATmega8A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x07
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCL	= 0x04
                                 .equ	ADCH	= 0x05
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 
                                 ; TCCR0 - Timer/Counter0 Control Register
                                 .equ	CS00	= 0	; Clock Select0 bit 0
                                 .equ	CS01	= 1	; Clock Select0 bit 1
                                 .equ	CS02	= 2	; Clock Select0 bit 2
                                 
                                 ; TCNT0 - Timer Counter 0
                                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	ADHSM	= 4	; ADC High Speed Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WTDON	= 6	; Enable watchdog
                                 .equ	RSTDISBL	= 7	; Disable reset
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ;.include "ModbusLib.inc"
                                 .list 
                                 .equ BAUD = 9600							; Скорость для UART в Бодах
                                 .equ XTAL = 16000000						; Частота в герцах
                                 .equ UBRR_value = (XTAL/(BAUD*16))-1		; Расчитывание значения для регистра UBRR
                                 
                                 .equ BUF_LEN =32							; Размер буфера для передачи данных
                                 .equ READ_TIME = 4							; Время ожидания очередного пакета данных
                                 .equ DATA_MEMORY_SIZE = 64					; Размер памяти регистров
                                 
                                 .equ POL_Hi = 0xA0							;Два байта полинома для CRC
                                 .equ POL_Lo = 0x01
                                 
                                 .def temp = r16
                                 .def sys = r17
                                 .def function= r18
                                 .def msg = r19
                                 .def lenght = r20
                                 .def CRCHi = r21					 ; Обозначение регистров
                                 .def CRCLo = r22
                                 
                                 .macro Read_Func ; Определение функции
                                 	push r16
                                 	in r16, SREG
                                 	push r16
                                 	push r17
                                 	push r19
                                 	push r21
                                 	push r22
                                 	cli
                                 	cpi @0,0x01									; Чтение Discrete Outputs
                                 	breq find_ReadCoils
                                 	cpi @0,0x02									; Чтение Discrete Inputs
                                 	breq find_Read_DI		
                                 	cpi @0, 0x03								; Чтение Analog Outputs
                                 	breq find_Read_AO_Registers					
                                 	cpi @0, 0x04								; Чтение Analog Inputs
                                 	breq find_Read_AI_Registers
                                 	cpi @0,0x05									; Запись одного Discrete Output
                                 	breq find_WriteOneCoil						
                                 	cpi @0, 0x06								; Запись одного Analog Output
                                 	breq find_Write_One_AO_Register				
                                 	cpi @0,0x0f									; Запись нексольких Discrete Outputs
                                 	breq find_WriteSeveralCoils					
                                 	cpi @0,0x10									; Запись нексольких Analog Outputs
                                 	breq find_Write_Several_AO_Registers
                                 
                                 	brne find_NoCommand_Error
                                 	find_ReadCoils:
                                 		rcall ReadCoils
                                 	find_Read_DI:
                                 		rcall Read_DI
                                 	find_Read_AO_Registers:
                                 		rcall Read_AO_Registers
                                 	find_Read_AI_Registers:
                                 		rcall Read_AI_Registers
                                 	find_WriteOneCoil:
                                 		rcall WriteOneCoil
                                 	find_WriteSeveralCoils:
                                 		rcall WriteSeveralCoils
                                 	find_Write_One_AO_Register:
                                 		rcall Write_One_AO_Register
                                 	find_Write_Several_AO_Registers:
                                 		rcall Write_Several_AO_Registers
                                 	find_NoCommand_Error:
                                 		rcall NoCommand_Error
                                 
                                 ;------------------------------------		;0x01
                                 	ReadCoils:								; ЧТЕНИЕ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВЫВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RC_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RC_wrong_addres
                                 		cpi XL, 4
                                 		brsh RC_wrong_addres
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne RC_wrong_count				
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo RC_wrong_count
                                 		ldi r17,DATA_MEMORY_SIZE-2			; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh RC_wrong_count
                                 		rjmp RC_check_ok
                                 		;
                                 		RC_wrong_addres:
                                 			rcall  WrongAddres_Error
                                 		RC_wrong_count:
                                 			rcall WrongValue_Error
                                 		;
                                 		RC_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		
                                 		st Y+, @0
                                 		; вычисление кол-ва байт на отправку
                                 		ldi r17, 0x00
                                 		ldi r19, 0xff
                                 		RC_calc_bytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RC_calc_bytes_end
                                 			subi r16,8
                                 			breq RC_calc_bytes_end
                                 			brne RC_calc_bytes
                                 		RC_calc_bytes_end:
                                 		st Y+, r17
                                 		inc lenght
                                 		mov r19, r17
                                 
                                 		lds r16,  low_buf_addres
                                 		ldi r17, 0x00
                                 		RC_calc_addresbytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RC_calc_addresbytes_end
                                 			subi r16,8
                                 			breq RC_calc_addresbytes_end
                                 			brne RC_calc_addresbytes
                                 		RC_calc_addresbytes_end:
                                 		
                                 		ldi XH,high(DO_data)
                                 		ldi XL,low(DO_data)
                                 		RC_addres_shift:
                                 			ld r21, X+
                                 			dec r17
                                 		brne RC_addres_shift
                                 		ld r22, X+					
                                 		cpi r16, 0x00
                                 		breq RC_shift_end
                                 		RC_shift:							; Выполняем свдиг до необходимого адреса в регистре
                                 			lsr r22
                                 			ror r21
                                 			dec r16
                                 		brne RC_shift
                                 		RC_shift_end:
                                 		ld r16,-X
                                 		ldi r16, 0x00
                                 		lds r17, buf_bytes_count			; Дополняем пакет данными
                                 		RC_bytes_mask:
                                 			sec
                                 			rol r16
                                 			dec r17
                                 		brne RC_bytes_mask
                                 		RC_Read_DI:
                                 			and r21, r16
                                 			st Y+, r21
                                 			inc lenght
                                 			mov r21, r22
                                 			ld r22, X+
                                 			dec r19
                                 		brne RC_Read_DI
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 ;------------------------------------		; 0x02
                                 	Read_DI:								; ЧТЕНИЕ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RDI_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RDI_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE
                                 		brsh RDI_wrong_addres
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne RDI_wrong_count				
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo RDI_wrong_count
                                 		ldi r17,DATA_MEMORY_SIZE-2			; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh RDI_wrong_count
                                 		rjmp RDI_check_ok
                                 		;
                                 		RDI_wrong_addres:
                                 			rcall  WrongAddres_Error
                                 		RDI_wrong_count:
                                 			rcall WrongValue_Error
                                 		;
                                 		RDI_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		
                                 		st Y+, @0
                                 		; вычисление кол-ва байт на отправку
                                 		ldi r17, 0x00
                                 		ldi r19, 0xff
                                 		RDI_calc_bytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RDI_calc_bytes_end
                                 			subi r16,8
                                 			breq RDI_calc_bytes_end
                                 			brne RDI_calc_bytes
                                 		RDI_calc_bytes_end:
                                 		st Y+, r17
                                 		inc lenght
                                 		mov r19, r17
                                 
                                 		lds r16,  low_buf_addres
                                 		ldi r17, 0x00
                                 		RDI_calc_addresbytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RDI_calc_addresbytes_end
                                 			subi r16,8
                                 			breq RDI_calc_addresbytes_end
                                 			brne RDI_calc_addresbytes
                                 		RDI_calc_addresbytes_end:
                                 		
                                 		ldi XH,high(DI_data)
                                 		ldi XL,low(DI_data)
                                 		RDI_addres_shift:
                                 			ld r21, X+
                                 			dec r17
                                 		brne RDI_addres_shift
                                 		ld r22, X+					
                                 		cpi r16, 0x00
                                 		breq RDI_shift_end
                                 		RDI_shift:							; Выполняем свдиг до необходимого адреса в регистре
                                 			lsr r22
                                 			ror r21
                                 			dec r16
                                 		brne RDI_shift
                                 		RDI_shift_end:
                                 		ld r16,-X
                                 		ldi r16, 0x00
                                 		lds r17, buf_bytes_count			; Дополняем пакет данными
                                 		RDI_bytes_mask:
                                 			sec
                                 			rol r16
                                 			dec r17
                                 		brne RDI_bytes_mask
                                 		RDI_Read_DI:
                                 			and r21, r16
                                 			st Y+, r21
                                 			inc lenght
                                 			mov r21, r22
                                 			ld r22, X+
                                 			dec r19
                                 		brne RDI_Read_DI
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 ;-------------------------------------------; 0x03
                                 	Read_AO_Registers:						; ЧТЕНИЕ АНАЛОГОВЫХ ВЫВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RAO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RAO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh RAO_wrong_addres
                                 		;RAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne RAO_wrong_count
                                 		cpi r16, 0x01
                                 		brlo RAO_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh RAO_wrong_count
                                 		rjmp RAO_check_ok
                                 		;
                                 		RAO_wrong_addres:					; Переход в ошибки
                                 			rcall WrongAddres_Error
                                 		RAO_wrong_count:
                                 			rcall WrongAddres_Error
                                 		;
                                 		RAO_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		st Y+, @0
                                 		add r16, r16
                                 		st Y+, r16
                                 		lds r16,buf_bytes_count
                                 		inc lenght
                                 		ldi XH,high(AO_data)
                                 		ldi XL,low(AO_data)
                                 		lds r19, low_buf_addres
                                 		;sts temp_sram, r19
                                 		cpi r19,0x00
                                 		breq RAO_read_AO
                                 		RAO_addres_shift:
                                 			ld r17, X+
                                 			ld r17, X+
                                 			dec r19
                                 		brne RAO_addres_shift
                                 		RAO_read_AO:
                                 			ld r17, X+
                                 			;sts temp_sram, r17
                                 			st Y+, r17
                                 			inc lenght
                                 			ld r17, X+
                                 			st Y+, r17
                                 			inc lenght
                                 			dec r16
                                 		brne RAO_read_AO
                                 		rjmp Read_Func_end
                                 
                                 ;-------------------------------------------; 0x04
                                 	Read_AI_Registers:						; ЧТЕНИЕ АНАЛОГОВЫХ ВВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RAI_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RAI_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh RAI_wrong_addres
                                 		;RAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne RAI_wrong_count
                                 		cpi r16, 0x01
                                 		brlo RAI_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh RAI_wrong_count
                                 		rjmp RAI_check_ok
                                 		;
                                 		RAI_wrong_addres:					; Переход в ошибки
                                 			rcall WrongAddres_Error
                                 		RAI_wrong_count:
                                 			rcall WrongAddres_Error
                                 		;
                                 		RAI_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		st Y+, @0
                                 		add r16, r16
                                 		st Y+, r16
                                 		lds r16,buf_bytes_count
                                 		inc lenght
                                 		ldi XH,high(AI_data)
                                 		ldi XL,low(AI_data)
                                 		lds r19, low_buf_addres
                                 		;sts temp_sram, r19
                                 		cpi r19,0x00
                                 		breq RAO_read_AO
                                 		RAI_addres_shift:
                                 			ld r17, X+
                                 			ld r17, X+
                                 			dec r19
                                 		brne RAI_addres_shift
                                 		RAI_read_AO:
                                 			ld r17, X+
                                 			;sts temp_sram, r17
                                 			st Y+, r17
                                 			inc lenght
                                 			ld r17, X+
                                 			st Y+, r17
                                 			inc lenght
                                 			dec r16
                                 		brne RAI_read_AO
                                 		rjmp Read_Func_end
                                 
                                 ;------------------------------------------ ;0x05
                                 	WriteOneCoil:							; ЗАПИСЬ ЗНАЧЕНИЯ В ОДИН ДИСКРЕТНЫЙ ВЫВОД
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WOC_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo WOC_wrong_addres
                                 		cpi XL, 6
                                 		brsh WOC_wrong_addres
                                 		;WOC_Value_check:
                                 		ld r17, Z+							; Проверка вводимого значения
                                 		ld r16, Z+
                                 		cpi XL,5
                                 		breq WOC_reset_request
                                 		cpi r16,0x00
                                 		brne WOC_wrong_count
                                 		cpi r17,0x00
                                 		breq WOC_count_ok
                                 		cpi r17,0xff
                                 		breq WOC_count_ok
                                 		rjmp WOC_wrong_count
                                 			
                                 		WOC_count_ok:
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			ldi r22,0x01
                                 			mov r21, XL
                                 			cpi r21, 0x00
                                 			breq WOC_shift_end
                                 			WOC_shift:
                                 				lsl r22
                                 				dec r21
                                 			brne WOC_shift
                                 			WOC_shift_end:
                                 			
                                 			ldi XH,high(DO_data)
                                 			ldi XL,low(DO_data)
                                 
                                 			cpi r17, 0xff
                                 			brne clr_WOC
                                 				ld r16, X+
                                 				or r16, r22
                                 				st -X,r16
                                 				sts out_offset, lenght
                                 				rjmp Read_Func_end
                                 			clr_WOC:
                                 				com r22
                                 				ld r16, X+ ;PORTC
                                 				and r16, r22
                                 				st -X,r16	;PORTC
                                 				sts out_offset, lenght
                                 				rjmp Read_Func_end
                                 			WOC_reset_request:
                                 				cpi r17, 0xff
                                 				brne WOC_wrong_count
                                 				rjmp Reset
                                 		WOC_wrong_addres:
                                 			rcall  WrongAddres_Error
                                 		WOC_wrong_count:
                                 			rcall WrongValue_Error
                                 ;-------------------------------------------;0x06
                                 	Write_One_AO_Register:					; ЗАПИСЬ ОДНОГО АНАЛОГОВОГО ВЫВОДА
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne W1AO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo W1AO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh W1AO_wrong_addres
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		rjmp W1AO_check_ok
                                 		;
                                 		W1AO_wrong_addres:
                                 			rcall WrongAddres_Error
                                 		W1AO_Wrong_Value:
                                 			rcall WrongValue_Error
                                 		;
                                 		W1AO_check_ok:
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			mov r19, XL
                                 			ldi XH,high(AO_data)
                                 			ldi XL,low(AO_data)
                                 			cpi r19,0x00
                                 			breq W1AO_writeEEPROM_DevAdd
                                 			cpi r19,0x01
                                 			breq W1AO_writeEEPROM_TemMin
                                 			cpi r19,0x02
                                 			breq W1AO_writeEEPROM_TemMax
                                 			rjmp W1AO_input_data
                                 
                                 			;Ввод в EEPROM
                                 			;Ввод нового адреса устройства
                                 			W1AO_writeEEPROM_DevAdd:
                                 				cpi r16, 0x00
                                 					breq W1AO_Wrong_Value
                                 				cpi r16, 0xF8
                                 					brsh W1AO_Wrong_Value
                                 				sts eeprom_data, r16
                                 				ldi r21,0x00
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts devise_address, r16
                                 				;EEWrite r16
                                 				rjmp W1AO_input_data
                                 			;Ввод нижней границы температуры
                                 			W1AO_writeEEPROM_TemMin:
                                 				lds r21,temperature_max
                                 				cp r16, r21
                                 					brlo W1AO_Wrong_Value
                                 				;EEWrite r16
                                 				sts eeprom_data, r16
                                 				ldi r21,0x01
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts temperature_min, r16
                                 				rjmp W1AO_input_data
                                 			;Ввод верхней границы температуры
                                 			W1AO_writeEEPROM_TemMax:
                                 				lds r21,temperature_min
                                 				cp r16, r21
                                 					brsh W1AO_Wrong_Value
                                 				;EEWrite r16
                                 				sts eeprom_data, r16
                                 				ldi r21,0x02
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts temperature_max, r16
                                 				rjmp W1AO_input_data
                                 
                                 			W1AO_input_data:
                                 			cpi r19,0x00
                                 				breq W1AO_write_AO
                                 			W1AO_addres_shift:
                                 				ld r21, X+
                                 				ld r21, X+
                                 				dec r19
                                 			brne W1AO_addres_shift
                                 			W1AO_write_AO:
                                 				st X+, r17
                                 				st X+, r16
                                 			rjmp Read_Func_end
                                 
                                 ;-------------------------------------------;0x0F
                                 	WriteSeveralCoils:						; ЗАПИСЬ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВЫВОДОВ	
                                 
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WSC_Wrong_Addres
                                 		cpi XL, 0x00
                                 		brlo WSC_Wrong_Addres
                                 		cpi XL, 5
                                 		brsh WSC_Wrong_Addres
                                 		
                                 		sts high_buf_addres, XH 
                                 		sts low_buf_addres, XL 
                                 
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne WSC_Wrong_Count
                                 		sts high_buf_registers_count, r16
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo WSC_Wrong_Count
                                 		ldi r17,6							; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh WSC_Wrong_Count
                                 		sts low_buf_registers_count, r16
                                 		ld r17,Z+
                                 		sts buf_bytes_count,r17				; Проверка кол-ва следующих байтов
                                 		cpi r17, 0							; если кол-во равно 0, то присвоить 1
                                 		brne WSC_CheckBytesCount
                                 			inc r17
                                 			sts buf_bytes_count,r17
                                 			rjmp WSC_CheckEnd
                                 		WSC_CheckBytesCount:
                                 			
                                 			ldi r19, 8
                                 			mul r19, r17
                                 
                                 			cp r19, r16
                                 			brlo WSC_Wrong_Value
                                 			subi r19,8
                                 			cp r19, r16
                                 			brsh WSC_Wrong_Value
                                 			sts buf_bytes_count,r17
                                 			rjmp WSC_CheckEnd
                                 		;
                                 		WSC_Wrong_Addres:					; Переход при ошибке
                                 			rcall WrongAddres_Error
                                 		WSC_Wrong_Count:
                                 			rcall WrongValue_Error
                                 		WSC_Wrong_Value:
                                 			rcall WrongCount_Error
                                 		;
                                 		ldi XH,high(DO_data)
                                 		ldi XL,low(DO_data)
                                 		WSC_CheckEnd:						; Окончание проверки
                                 			lds r16, low_buf_addres			; Адрес первого DO
                                 			lds r17, low_buf_registers_count; Количество записываемых DO
                                 			lds r23, buf_bytes_count
                                 		WSC_setbytes_loop:					; Цикл прохода по введённым байтам
                                 			ldi r19,0xff
                                 			ld r19,Z+
                                 			cpi r17, 8
                                 			brsh WCS_shift_MT8		
                                 			WSC_OneShift:
                                 				ld r21, X+ ; in r21, PORTC
                                 				cpi r16,0
                                 				breq WSC_AddShift_end
                                 			WSC_AddShift:
                                 				lsr r21
                                 				ror r22
                                 				dec r16
                                 			brne WSC_AddShift
                                 				lds r16, low_buf_addres
                                 			WSC_AddShift_sec:
                                 				lsl r22
                                 				rol r19
                                 				dec r16
                                 			brne WSC_AddShift_sec
                                 				lds r16, low_buf_addres
                                 			WSC_AddShift_third:
                                 				lsl r21
                                 				dec r16
                                 			brne WSC_AddShift_third
                                 			WSC_AddShift_end:
                                 				lds r16, low_buf_addres
                                 				add r16,r17
                                 				ldi r17, 8
                                 				sub r17, r16
                                 				mov r16,r17
                                 			WSC_RightByteShift:
                                 				lsl r19
                                 				dec r16
                                 			brne WSC_RightByteShift
                                 				mov r16,r17
                                 				ldi r22,0x00
                                 			WSC_RightByteShift_sec:
                                 				lsl r21
                                 				rol r22
                                 				dec r16
                                 			brne WSC_RightByteShift_sec
                                 				mov r16,r17
                                 			WSC_RightByteShift_third:
                                 				lsr r22
                                 				ror r19
                                 				dec r16
                                 			brne WSC_RightByteShift_third
                                 				ldi XH,high(DO_data)
                                 				ldi XL,low(DO_data)
                                 				st X, r19	;out PORTC, r19	
                                 				rjmp WCS_shift_end
                                 			WCS_shift_MT8:
                                 				ldi XH,high(DO_data)
                                 				ldi XL,low(DO_data)
                                 				ld r22, X+	; in r22,PORTC
                                 				and r22,r19
                                 				st -X, r22	; out PORTC,r22
                                 				subi r17,8				
                                 			WCS_shift_end:
                                 			pop r17
                                 			lds r17, buf_bytes_count
                                 			dec r17
                                 			sts buf_bytes_count, r17
                                 			push r17
                                 		brne WSC_setbytes_loop
                                 		st Y+, function
                                 		lds r16, high_buf_addres
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, low_buf_addres
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, high_buf_registers_count
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, low_buf_registers_count
                                 		st Y+, r16
                                 		inc lenght
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 
                                 ;-------------------------------------------; 0x10 ЗАПИСЬ НЕСКОЛЬКИХ АНАЛОГОВЫХ ВЫВОДОВ
                                 	Write_Several_AO_Registers:
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WSAO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo WSAO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh WSAO_wrong_addres
                                 		;WSAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne WSAO_wrong_count
                                 		cpi r16, 0x01
                                 		brlo WSAO_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh WSAO_wrong_count
                                 		ld r19, Z+
                                 		mov r21, r16
                                 		add r21, r16
                                 		cp r21, r19
                                 		brne WSAO_wrong_count
                                 		rjmp WSAO_check_ok
                                 		;
                                 		WSAO_wrong_addres:					; При ошибке передходим в exception
                                 			rcall WrongAddres_Error
                                 		WSAO_wrong_count:
                                 			rcall WrongAddres_Error
                                 		;
                                 		WSAO_check_ok:
                                 			sts high_buf_addres, XH 
                                 			sts low_buf_addres, XL 
                                 			sts buf_bytes_count, r19
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			ldi XH,high(AO_data)
                                 			ldi XL,low(AO_data)
                                 			lds r21, low_buf_addres
                                 			add r21, r21
                                 			cpi r21, 0x00
                                 			breq WSAO_write_AO_bytes
                                 			WSAO_addres_shift:
                                 				ld r22,X+
                                 				dec r21
                                 				brne WSAO_addres_shift
                                 			WSAO_write_AO_bytes:
                                 				ld r22, Z+
                                 				st X+, r22
                                 				dec r19
                                 			brne WSAO_write_AO_bytes
                                 			
                                 			rjmp Read_Func_end
                                 
                                 ;--------------- ВЫВОД ОШИБОК------------------------;
                                 	NoCommand_Error:						 
                                 		Func_Error @0,1
                                 		rjmp Read_Func_end
                                 	WrongAddres_Error:
                                 		Func_Error @0,2
                                 		rjmp Read_Func_end
                                 	WrongValue_Error:
                                 		Func_Error @0,3
                                 		rjmp Read_Func_end
                                 	WrongCount_Error:
                                 		Func_Error @0,3
                                 		rjmp Read_Func_end
                                   Read_Func_end:
                                 	pop r22
                                 	pop r21
                                 	pop r19
                                 	pop r17
                                 	pop r16
                                 	out SREG, r16
                                 	pop r16
                                 	sei
                                 .endm
                                 
                                 
                                 .macro Func_Error		; @0 - код изначальной функции, @1 - excepction код
                                 	push r19
                                 		ldi r19, 0x80
                                 		add r19, @0
                                 		st Y+, r19
                                 		ldi r19, @1
                                 		st Y+, r19
                                 		lds r19, out_offset
                                 		inc r19
                                 		sts out_offset, r19
                                 		inc lenght
                                 	pop r19
                                 .endm
                                 
                                 .macro crc16  ; Вычисление СRC по каждому байту (передаётся регистр)
                                 	push r16
                                 	push r17
                                 
                                 	mov r16, @0
                                 	ldi r17, 8
                                 	eor CRCLo, r16
                                 	crc_loop:
                                 	
                                 	LSR CRCHi
                                 	ROR CRCLo
                                 	brcc zer1
                                 
                                 	ldi r16, POL_Hi
                                 	eor CRCHi, r16
                                 	ldi r16, POL_Lo
                                 	eor CRCLo, r16
                                 
                                 	zer1:
                                 	dec r17
                                 	brne crc_loop
                                 
                                 	pop r17
                                 	pop r16
                                 
                                 .endm
                                 
                                 .macro USART_Trancieve // Передача одного байта
                                 push r16
                                 trans_loop:
                                 	in r16, UCSRA
                                 	sbrs r16, UDRE					; Проверяем, не занят ли буфер передачи USART
                                 	rjmp trans_loop
                                 	out UDR,@0						; Передаём байт+
                                 pop r16
                                 .endm
                                 
                                 .macro EERead				; @0 - Address byte
                                 	EERead_loop:
                                 	sbic 	EECR,EEWE		; Ждем пока будет завершена прошлая запись.
                                 	rjmp	EERead_loop		; также крутимся в цикле.
                                 	cli
                                 	push r24
                                 	ldi		r24, 0x00
                                 	out		EEARH, r24		; загружаем адрес нужной ячейки
                                 	ldi		r24, @0
                                 	out 	EEARL, r24
                                 	;out  	EEARH, low(@0) 		; его старшие и младшие байты
                                 	sbi 	EECR,EERE 		; Выставляем бит чтения
                                 	in 	r16, EEDR 		; Забираем из регистра данных результат
                                 	sts eeprom_data,r16
                                 	pop r16
                                 	sei
                                 .endm
                                 
                                 .macro EEWrite				; @0 - Address byte, @1 - Data
                                 	EEWrite_loop:
                                 	sbic	EECR,EERE		; Ждем готовности памяти к записи. Крутимся в цикле
                                 	rjmp	EEWrite_loop 		; до тех пор пока не очистится флаг EEWE
                                  
                                 	cli				; Затем запрещаем прерывания.
                                 	push r24
                                 	;push r17
                                 	;push r21
                                 	mov		r24, @0
                                 	out 	EEARL, r24 		; Загружаем адрес нужной ячейки
                                 	ldi		r24, 0x00
                                 	out		EEARH, r24
                                 	;ldi		r16, high(@0)
                                 	;out 	EEARH, r16  		; старший и младший байт адреса
                                 	out 	EEDR, @1 		; и сами данные, которые нам нужно загрузить
                                 
                                 	sbi 	EECR,EEMWE		; взводим предохранитель
                                 	sbi 	EECR,EEWE		; записываем байт
                                 	
                                 	;pop r21
                                 	;pop r17
                                 	pop r24
                                 	sei 				    ; разрешаем прерывания
                                 .endm 				        ; возврат из процедуры
                                  
                                  
                                 ; Блок Данных
                                 .dseg 
                                 .org $100
                                 ;temp_sram: .BYTE 1
                                 ;temperature: .BYTE 1
                                 
000100                           in_data: .BYTE BUF_LEN				; Буфер принятых данных
000120                           in_offset: .BYTE 1					; Смещение в буфере при принятии
000121                           in_flag: .BYTE 1					; флаг для чтения пакета(0 при конце пакета)
000122                           in_count: .BYTE 1					; число принятых байтов
                                 
000123                           out_data: .BYTE BUF_LEN				; Буфер данных для отправки
000143                           out_offset: .BYTE 1					; Смещение в буфере при передаче
000144                           out_flag: .BYTE 1					; Флаг по окончании передачи пакета
000145                           high_buf_addres: .BYTE 1			; Буфер для первого адреса
000146                           low_buf_addres: .BYTE 1
000147                           high_buf_registers_count: .BYTE 1	; Буфер для хранения количества регистров
000148                           low_buf_registers_count: .BYTE 1
000149                           buf_bytes_count: .BYTE 1			; Буфер для хранения количества передаваемых байтов
                                 
00014a                           eeprom_data: .BYTE 1
00014b                           eeprom_address: .BYTE 1
00014c                           eeprom_flag: .BYTE 1
00014d                           devise_address: .BYTE 1				; Адрес устройства
                                 
00014e                           temperature_min: .BYTE 1
00014f                           temperature_max: .BYTE 1
000150                           temperature: .BYTE 1
000151                           temperature_data: .BYTE 2			; Дынные с датчика температуры
                                 
000153                           DO_data: .BYTE DATA_MEMORY_SIZE					; Discrete Output Coils (чтение/запись)
000193                           DI_data: .BYTE DATA_MEMORY_SIZE					; Discrete Input Coils (чтение)
0001d3                           AI_data: .BYTE DATA_MEMORY_SIZE					; Analog Input Coils (чтение)
000213                           AO_data: .BYTE DATA_MEMORY_SIZE					; Analog Output Coils (чтение/запись)
                                 
                                 ; Блок кода
                                 .cseg
                                 		 .org $000        	; (RESET) 
000000 c00e                               RJMP Reset
                                 		 .org $004
000004 c46d                      		 RJMP TIMER2_OVF
                                 		;.org $008
                                 		 ;RJMP TIMER1_OVF
                                 		 .org $009
000009 c496                      		 RJMP TIMER0_OVF
                                 		 .org $00b
00000b c44b                      		 rjmp USART_RXC
                                 		 .org $00e
00000e c404                      		 rjmp ADC_Conv_Complete
                                 
                                 Reset:
                                 
00000f e004                      ldi temp, High(Ramend)
000010 bf0e                      out sph, temp
000011 e50f                      ldi temp, Low(Ramend)
000012 bf0d                      out spl,temp
                                 
000013 ef5f                      ldi CRCHi,0xFF ; CrcIn
000014 ef6f                      ldi CRCLo,0xFF
                                 
000015 e0f0                      ldi r31,0x00
000016 e6e0                      ldi r30,0x60
000017 e002                      ldi r16,0x02
000018 e030                      ldi r19,0x00
                                 mem_cl:
000019 ef1f                        ldi r17,0xff
                                   mem_cl2:					; ОЧИЩАЕМ ПАМЯТЬ ПЕРЕД РАБОТОЙ 2*256 = 512 байт	st Z+,r19
00001a 9331                      	st Z+, r19
00001b 951a                      	dec r17
00001c f7e9                      	brne mem_cl2
00001d 950a                        dec r16
00001e f7d1                      brne mem_cl
                                 
                                 
                                 ; Настройка АЦП
00001f e600                      ldi		temp,	0b01100000
000020 b907                      out		ADMUX,	temp
000021 ec0f                      ldi temp, 0b11001111
000022 b906                      out ADCSRA, temp
                                 ;TIMER0 Settings
                                 ;ldi temp, 01			;Задаём TIMSK для всех таймеров
000023 e401                      ldi temp,(1<<TOIE2)|(1<<TOIE0);|(1<<TOIE1)
000024 bf09                      out TIMSK, temp
000025 e005                      ldi temp, 5
000026 bf03                      out TCCR0,temp
                                 
                                 ;TIMER1 Settings
                                 ;ldi temp, 0				; Выключаем подсчёт тактов, а включим только при необходимости
                                 ;out TCCR1B, temp
                                 
                                 ;TIMER2 Settings
000027 e000                      ldi temp, 0				; Выключаем подсчёт тактов, а включим только при необходимости
000028 bd05                      out TCCR2, temp
                                 
000029 e308                      ldi temp, 0b00111000
00002a bb04                      out ddrc, temp
                                 
00002b e001                      ldi temp, 0b00000001
00002c bb07                      out ddrb, temp
00002d 9aad                      sbi	PORTC,5
                                 
                                 ;ldi temp, 0b0010000
                                 ;out ddrd, temp
00002e e0b1                      ldi XH,high(DO_data)
00002f e5a3                      ldi XL,low(DO_data)
000030 930d                      st X+, temp
000031 bb05                      out PORTC, temp
                                 
000032 e80e                      ldi temp, 0b10001110
000033 bb01                      out ddrd, temp
000034 2f30                      mov msg, temp
                                 
                                 
000035 d3e7                      rcall USART_Init
                                 ;ldi temp, 0x01
                                 ;sts devise_address, temp
                                 
                                 ; Чтение адреса
000036 e0b2                      ldi XH,high(AO_data)
000037 e1a3                      ldi XL,low(AO_data)
000038 99e1
000039 cffe
00003a 94f8
00003b 938f
00003c e080
00003d bb8f
00003e e080
00003f bb8e
000040 9ae0
000041 b30d
000042 9300 014a
000044 910f
000045 9478                      EERead 0x00
000046 9100 014a                 lds temp, eeprom_data
000048 3f0f                      cpi temp, 0xff
000049 f479                      brne AdrRead_end
00004a e001                      	ldi temp, 0x01
00004b e010                      	ldi sys, 0x00
00004c 99e0
00004d cffe
00004e 94f8
00004f 938f
000050 2f81
000051 bb8e
000052 e080
000053 bb8f
000054 bb0d
000055 9ae2
000056 9ae1
000057 918f
000058 9478                      	EEWrite sys, temp
                                 AdrRead_end:
000059 e010                      ldi	r17,0x00
00005a 931d                      st	X+,	r17
00005b 930d                      st	X+,	temp
00005c 9300 014d                 sts devise_address, temp
                                 
                                 
                                 ;Чтение минимального порога температуры
00005e 99e1
00005f cffe
000060 94f8
000061 938f
000062 e080
000063 bb8f
000064 e081
000065 bb8e
000066 9ae0
000067 b30d
000068 9300 014a
00006a 910f
00006b 9478                      EERead 0x01
00006c 9100 014a                 lds temp, eeprom_data
00006e 3f0f                      cpi temp, 0xff
00006f f479                      brne TemMinRead_end
000070 ee03                      	ldi temp, 0b11100011 ;Нижнее ограничение диапазона температуры  +30
000071 e011                      	ldi sys, 0x01
000072 99e0
000073 cffe
000074 94f8
000075 938f
000076 2f81
000077 bb8e
000078 e080
000079 bb8f
00007a bb0d
00007b 9ae2
00007c 9ae1
00007d 918f
00007e 9478                      	EEWrite sys, temp
                                 TemMinRead_end:
00007f e010                      ldi	r17,0x00
000080 931d                      st	X+,	r17
000081 930d                      st	X+,	temp
000082 9300 014e                 sts temperature_min, temp
                                 
                                 ;Чтение максимального порога температуры
000084 99e1
000085 cffe
000086 94f8
000087 938f
000088 e080
000089 bb8f
00008a e082
00008b bb8e
00008c 9ae0
00008d b30d
00008e 9300 014a
000090 910f
000091 9478                      EERead 0x02
000092 9100 014a                 lds temp, eeprom_data
000094 3f0f                      cpi temp, 0xff
000095 f479                      brne TemMaxRead_end
000096 eb06                      	ldi temp, 0b10110110 ; Верхнее ограничение диапазона температуры  +60
000097 e012                      	ldi sys, 0x02
000098 99e0
000099 cffe
00009a 94f8
00009b 938f
00009c 2f81
00009d bb8e
00009e e080
00009f bb8f
0000a0 bb0d
0000a1 9ae2
0000a2 9ae1
0000a3 918f
0000a4 9478                      	EEWrite sys, temp
                                 TemMaxRead_end:
0000a5 e010                      ldi	r17,0x00
0000a6 931d                      st	X+,	r17
0000a7 930d                      st	X+,	temp
0000a8 9300 014f                 sts temperature_max, temp
                                 
                                 /*
                                 ; Установление min и max для температуры
                                 ldi temp, 0b11100011 ;Нижнее ограничение диапазона температуры  +30
                                 sts temperature_min, temp
                                 ldi temp, 0b10110110 ; Верхнее ограничение диапазона температуры  +60
                                 sts temperature_max, temp*/
                                 
0000aa e000                      ldi temp, 0x00
0000ab 9300 0120                 sts in_offset, temp
0000ad 9300 0122                 sts in_count, temp
0000af e0e0                      ldi ZL, low(in_data)
0000b0 e0f1                      ldi ZH, high(in_data)
                                 
0000b1 e2c3                      ldi YL, low(out_data)
0000b2 e0d1                      ldi YH, high(out_data)
                                 
0000b3 9478                      sei
                                 /*
                                 ldi ZL,low(in_data)	
                                 ldi ZH,high(in_data)
                                 ldi temp, 0x01
                                 st Z+,temp
                                 ldi temp, 0x06
                                 st Z+,temp
                                 ldi temp, 0x00
                                 st Z+,temp
                                 ldi temp, 0x01
                                 st Z+,temp
                                 ldi temp, 0x00
                                 st Z+,temp
                                 ldi temp, 0x10
                                 st Z+,temp
                                 ldi temp, 6
                                 sts in_offset, temp
                                 ;*/
                                 ;----------------------------- MAIN ---------------------------;
                                 main:
0000b4 ec0f                      	ldi temp, 0b11001111
0000b5 b906                      	out ADCSRA, temp
0000b6 e5a3                      	ldi XL,low(DO_data)			; Чтение значений из пямяти дискретных выводов для индикации
0000b7 e0b1                      	ldi XH,high(DO_data)
0000b8 910d                      	ld temp, X+
0000b9 9aad                      	sbi PORTC,5
0000ba bb05                      	out PORTC,temp
0000bb 9892                      	cbi PORTD,2
                                 	;ld sys, X+
                                 	;ldi XL,low(DI_data)			; Опрос дискретных входов и занесение значений в память DI
                                 	;ldi XH,high(DI_data)
                                 	;in temp, PORTB
                                 	;st X+,temp
                                 	
                                 	;ldi temp, 0x20
                                 	;sts temperature, temp
                                 	;;;;;;;;;;
                                 
0000bc d36a                      	rcall Temperature_Read
                                 
                                 	;;;;;;;;;;
0000bd 9100 014c                 	lds temp, eeprom_flag
0000bf 3001                      	cpi temp, 0x01
0000c0 f0c0                      	brlo EEPROM_write_end
0000c1 9100 014a                 		lds temp, eeprom_data
0000c3 9110 014b                 		lds sys, eeprom_address
0000c5 99e0
0000c6 cffe
0000c7 94f8
0000c8 938f
0000c9 2f81
0000ca bb8e
0000cb e080
0000cc bb8f
0000cd bb0d
0000ce 9ae2
0000cf 9ae1
0000d0 918f
0000d1 9478                      		EEWrite sys, temp
0000d2 2700                      		clr temp
0000d3 9300 014a                 		sts eeprom_data, temp
0000d5 9300 014b                 		sts eeprom_address, temp
0000d7 9300 014c                 		sts eeprom_flag, temp
                                 	EEPROM_write_end:
0000d9 9100 0120                 	lds temp, in_offset				; ждать появления первого байта
0000db 2300                      	and temp,temp
0000dc f021                      		breq Main_end
0000dd 9a97                      	sbi	PORTD,7
                                 	; Переход на приём/передачу по modbus
                                 	;ldi temp, 0b00001111			; выключаем АЦП
0000de e00f                      	ldi temp, 0b00001111
0000df b906                      	out ADCSRA, temp
0000e0 c001                      	rjmp MODBUS_Communication
                                 	Main_end:
0000e1 cfd2                      rjmp main
                                 
                                 ;--------------------------- КОНЕЦ MAIN'А---------------------;
                                 
                                 ;-------------------- ПРИЁМ/ПЕРЕДАЧА ПО MODBUS----------------;
                                 MODBUS_Communication:
                                 	;/*
0000e2 9102                      	ld temp, -Z					; проверка адреса устройства
0000e3 9110 014d                 	lds sys, devise_address
0000e5 9301                      	st Z+, temp
0000e6 1301                      	cpse temp, sys
0000e7 c319                      	rjmp Modbus_end
                                   wait_end:
0000e8 9100 0121                 	lds temp, in_flag			; ждать завершения принятого пакета
0000ea 2300                      	and temp,temp
0000eb f7e1                      	brne wait_end
                                 	
0000ec 94f8                      	cli
0000ed 9897                      	cbi	PORTD,7
0000ee e0f1                      	ldi ZH, high(in_data)
0000ef e0e0                      	ldi ZL, low(in_data)
0000f0 9100 0120                 	lds temp,in_offset
                                   calc_crc:
0000f2 9131                      	ld msg, Z+
0000f3 930f
0000f4 931f
0000f5 2f03
0000f6 e018
0000f7 2760
0000f8 9556
0000f9 9567
0000fa f420
0000fb ea00
0000fc 2750
0000fd e001
0000fe 2760
0000ff 951a
000100 f7b9
000101 911f
000102 910f                      	crc16 msg
000103 950a                      	dec temp
000104 f769                      	brne calc_crc
                                 
000105 e000                      	ldi temp, 0x00				; Проверка CRC
000106 1350                      	cpse CRCHi, temp
000107 c2f9                      	rjmp Modbus_end
000108 1356                      	cpse CRCHi,CRCLo
000109 c2f7                      	rjmp Modbus_end
                                 	;*/
                                   end_receive:
00010a 9100 0120                 	lds temp, in_offset			; сформировать число принятых байтов
00010c 950a                      	dec temp
00010d 950a                      	dec temp
00010e 9300 0122                 	sts in_count,temp
                                 
000110 e0f1                      	ldi ZH, high(in_data)	
000111 e0e0                      	ldi ZL, low(in_data)
000112 e0d1                      	ldi YH, high(out_data)
000113 e2c3                      	ldi YL, low(out_data)
                                 ;----------Запись адреса в буфер и определение modbus функции-------;
000114 9131                      	ld msg,Z+
000115 9339                      	st Y+, msg
000116 9121                      	ld function, Z+
000117 e042                      	ldi lenght, 2
                                 
000118 930f
000119 b70f
00011a 930f
00011b 931f
00011c 933f
00011d 935f
00011e 936f
00011f 94f8
000120 3021
000121 f079
000122 3022
000123 f071
000124 3023
000125 f069
000126 3024
000127 f061
000128 3025
000129 f059
00012a 3026
00012b f059
00012c 302f
00012d f041
00012e 3120
00012f f041
000130 f441
000131 d008
000132 d055
000133 d0a2
000134 d0d5
000135 d108
000136 d196
000137 d13f
000138 d21c
000139 d253
00013a 91b1
00013b 91a1
00013c 30b0
00013d f479
00013e 30a0
00013f f068
000140 30a4
000141 f458
000142 9101
000143 3000
000144 f449
000145 9101
000146 3001
000147 f030
000148 e31e
000149 1b1a
00014a 1701
00014b f410
00014c c002
00014d d24d
00014e d25a
00014f 93b0 0145
000151 93a0 0146
000153 9300 0149
000155 9329
000156 e010
000157 ef3f
000158 9513
000159 3008
00015a f018
00015b 5008
00015c f009
00015d f7d1
00015e 9319
00015f 9543
000160 2f31
000161 9100 0146
000163 e010
000164 9513
000165 3008
000166 f018
000167 5008
000168 f009
000169 f7d1
00016a e0b1
00016b e5a3
00016c 915d
00016d 951a
00016e f7e9
00016f 916d
000170 3000
000171 f021
000172 9566
000173 9557
000174 950a
000175 f7e1
000176 910e
000177 e000
000178 9110 0149
00017a 9408
00017b 1f00
00017c 951a
00017d f7e1
00017e 2350
00017f 9359
000180 9543
000181 2f56
000182 916d
000183 953a
000184 f7c9
000185 9340 0143
000187 c23d
000188 91b1
000189 91a1
00018a 30b0
00018b f479
00018c 30a0
00018d f068
00018e 34a0
00018f f458
000190 9101
000191 3000
000192 f449
000193 9101
000194 3001
000195 f030
000196 e31e
000197 1b1a
000198 1701
000199 f410
00019a c002
00019b d1ff
00019c d20c
00019d 93b0 0145
00019f 93a0 0146
0001a1 9300 0149
0001a3 9329
0001a4 e010
0001a5 ef3f
0001a6 9513
0001a7 3008
0001a8 f018
0001a9 5008
0001aa f009
0001ab f7d1
0001ac 9319
0001ad 9543
0001ae 2f31
0001af 9100 0146
0001b1 e010
0001b2 9513
0001b3 3008
0001b4 f018
0001b5 5008
0001b6 f009
0001b7 f7d1
0001b8 e0b1
0001b9 e9a3
0001ba 915d
0001bb 951a
0001bc f7e9
0001bd 916d
0001be 3000
0001bf f021
0001c0 9566
0001c1 9557
0001c2 950a
0001c3 f7e1
0001c4 910e
0001c5 e000
0001c6 9110 0149
0001c8 9408
0001c9 1f00
0001ca 951a
0001cb f7e1
0001cc 2350
0001cd 9359
0001ce 9543
0001cf 2f56
0001d0 916d
0001d1 953a
0001d2 f7c9
0001d3 9340 0143
0001d5 c1ef
0001d6 91b1
0001d7 91a1
0001d8 30b0
0001d9 f479
0001da 30a0
0001db f068
0001dc 32a0
0001dd f458
0001de 9111
0001df 9101
0001e0 3010
0001e1 f441
0001e2 3001
0001e3 f030
0001e4 2f3a
0001e5 0f30
0001e6 3231
0001e7 f410
0001e8 c002
0001e9 d1b1
0001ea d1b0
0001eb 93b0 0145
0001ed 93a0 0146
0001ef 9300 0149
0001f1 9329
0001f2 0f00
0001f3 9309
0001f4 9100 0149
0001f6 9543
0001f7 e0b2
0001f8 e1a3
0001f9 9130 0146
0001fb 3030
0001fc f021
0001fd 911d
0001fe 911d
0001ff 953a
000200 f7e1
000201 911d
000202 9319
000203 9543
000204 911d
000205 9319
000206 9543
000207 950a
000208 f7c1
000209 c1bb
00020a 91b1
00020b 91a1
00020c 30b0
00020d f479
00020e 30a0
00020f f068
000210 32a0
000211 f458
000212 9111
000213 9101
000214 3010
000215 f441
000216 3001
000217 f030
000218 2f3a
000219 0f30
00021a 3231
00021b f410
00021c c002
00021d d17d
00021e d17c
00021f 93b0 0145
000221 93a0 0146
000223 9300 0149
000225 9329
000226 0f00
000227 9309
000228 9100 0149
00022a 9543
00022b e0b1
00022c eda3
00022d 9130 0146
00022f 3030
000230 f281
000231 911d
000232 911d
000233 953a
000234 f7e1
000235 911d
000236 9319
000237 9543
000238 911d
000239 9319
00023a 9543
00023b 950a
00023c f7c1
00023d c187
00023e 91b1
00023f 91a1
000240 30b0
000241 f599
000242 30a0
000243 f188
000244 30a6
000245 f578
000246 9111
000247 9101
000248 30a5
000249 f141
00024a 3000
00024b f551
00024c 3010
00024d f019
00024e 3f1f
00024f f009
000250 c025
000251 9329
000252 93b9
000253 9543
000254 93a9
000255 9543
000256 9319
000257 9543
000258 9309
000259 9543
00025a e061
00025b 2f5a
00025c 3050
00025d f019
00025e 0f66
00025f 955a
000260 f7e9
000261 e0b1
000262 e5a3
000263 3f1f
000264 f431
000265 910d
000266 2b06
000267 930e
000268 9340 0143
00026a c15a
00026b 9560
00026c 910d
00026d 2306
00026e 930e
00026f 9340 0143
000271 c153
000272 3f1f
000273 f411
000274 cd9a
000275 d125
000276 d132
000277 91b1
000278 91a1
000279 30b0
00027a f439
00027b 30a0
00027c f028
00027d 32a0
00027e f418
00027f 9111
000280 9101
000281 c002
000282 d118
000283 d125
000284 9329
000285 93b9
000286 9543
000287 93a9
000288 9543
000289 9319
00028a 9543
00028b 9309
00028c 9543
00028d 2f3a
00028e e0b2
00028f e1a3
000290 3030
000291 f029
000292 3031
000293 f091
000294 3032
000295 f0f9
000296 c02d
000297 3000
000298 f351
000299 3f08
00029a f740
00029b 9300 014a
00029d e050
00029e 9350 014b
0002a0 e051
0002a1 9350 014c
0002a3 9300 014d
0002a5 c01e
0002a6 9150 014f
0002a8 1705
0002a9 f2c8
0002aa 9300 014a
0002ac e051
0002ad 9350 014b
0002af e051
0002b0 9350 014c
0002b2 9300 014e
0002b4 c00f
0002b5 9150 014e
0002b7 1705
0002b8 f650
0002b9 9300 014a
0002bb e052
0002bc 9350 014b
0002be e051
0002bf 9350 014c
0002c1 9300 014f
0002c3 c000
0002c4 3030
0002c5 f021
0002c6 915d
0002c7 915d
0002c8 953a
0002c9 f7e1
0002ca 931d
0002cb 930d
0002cc c0f8
0002cd 91b1
0002ce 91a1
0002cf 30b0
0002d0 f549
0002d1 30a0
0002d2 f138
0002d3 30a5
0002d4 f528
0002d5 93b0 0145
0002d7 93a0 0146
0002d9 9101
0002da 3000
0002db f4f9
0002dc 9300 0147
0002de 9101
0002df 3001
0002e0 f0d0
0002e1 e016
0002e2 1b1a
0002e3 1701
0002e4 f4b0
0002e5 9300 0148
0002e7 9111
0002e8 9310 0149
0002ea 3010
0002eb f421
0002ec 9513
0002ed 9310 0149
0002ef c00f
0002f0 e038
0002f1 9f31
0002f2 1730
0002f3 f040
0002f4 5038
0002f5 1730
0002f6 f428
0002f7 9310 0149
0002f9 c005
0002fa d0a0
0002fb d0ad
0002fc d0ba
0002fd e0b1
0002fe e5a3
0002ff 9100 0146
000301 9110 0148
000303 9170 0149
000305 ef3f
000306 9131
000307 3018
000308 f550
000309 915d
00030a 3000
00030b f079
00030c 9556
00030d 9567
00030e 950a
00030f f7e1
000310 9100 0146
000312 0f66
000313 1f33
000314 950a
000315 f7e1
000316 9100 0146
000318 0f55
000319 950a
00031a f7e9
00031b 9100 0146
00031d 0f01
00031e e018
00031f 1b10
000320 2f01
000321 0f33
000322 950a
000323 f7e9
000324 2f01
000325 e060
000326 0f55
000327 1f66
000328 950a
000329 f7e1
00032a 2f01
00032b 9566
00032c 9537
00032d 950a
00032e f7e1
00032f e0b1
000330 e5a3
000331 933c
000332 c006
000333 e0b1
000334 e5a3
000335 916d
000336 2363
000337 936e
000338 5018
000339 911f
00033a 9110 0149
00033c 951a
00033d 9310 0149
00033f 931f
000340 f621
000341 9329
000342 9100 0145
000344 9309
000345 9543
000346 9100 0146
000348 9309
000349 9543
00034a 9100 0147
00034c 9309
00034d 9543
00034e 9100 0148
000350 9309
000351 9543
000352 9340 0143
000354 c070
000355 91b1
000356 91a1
000357 30b0
000358 f4a1
000359 30a0
00035a f090
00035b 32a0
00035c f480
00035d 9111
00035e 9101
00035f 3010
000360 f469
000361 3001
000362 f058
000363 2f3a
000364 0f30
000365 3231
000366 f438
000367 9131
000368 2f50
000369 0f50
00036a 1753
00036b f411
00036c c002
00036d d02d
00036e d02c
00036f 93b0 0145
000371 93a0 0146
000373 9330 0149
000375 9329
000376 93b9
000377 9543
000378 93a9
000379 9543
00037a 9319
00037b 9543
00037c 9309
00037d 9543
00037e e0b2
00037f e1a3
000380 9150 0146
000382 0f55
000383 3050
000384 f019
000385 916d
000386 955a
000387 f7e9
000388 9161
000389 936d
00038a 953a
00038b f7e1
00038c c038
00038d 933f
00038e e830
00038f 0f32
000390 9339
000391 e031
000392 9339
000393 9130 0143
000395 9533
000396 9330 0143
000398 9543
000399 913f
00039a c02a
00039b 933f
00039c e830
00039d 0f32
00039e 9339
00039f e032
0003a0 9339
0003a1 9130 0143
0003a3 9533
0003a4 9330 0143
0003a6 9543
0003a7 913f
0003a8 c01c
0003a9 933f
0003aa e830
0003ab 0f32
0003ac 9339
0003ad e033
0003ae 9339
0003af 9130 0143
0003b1 9533
0003b2 9330 0143
0003b4 9543
0003b5 913f
0003b6 c00e
0003b7 933f
0003b8 e830
0003b9 0f32
0003ba 9339
0003bb e033
0003bc 9339
0003bd 9130 0143
0003bf 9533
0003c0 9330 0143
0003c2 9543
0003c3 913f
0003c4 c000
0003c5 916f
0003c6 915f
0003c7 913f
0003c8 911f
0003c9 910f
0003ca bf0f
0003cb 910f
0003cc 9478                      	Read_Func function
                                 ;----------Начало передачи-----------;
                                 	;
                                 	;cbi PORTD,2
                                 	;ldi XH,high(DO_data)			 ; Выключаем светодиод при передаче
                                 	;ldi XL,low(DO_data)
                                 	;ld temp, X+
                                 	;sbr temp, $10
                                 	;st -X, temp
0003cd 0000                      	nop
0003ce 0000                      	nop
0003cf 0000                      	nop
0003d0 9a92                      	sbi PORTD,2
                                 
0003d1 9ac0                      	sbi	PORTB,0
                                 
0003d2 e0d1                      	ldi YH, high(out_data)
0003d3 e2c3                      	ldi YL, low(out_data)
                                 
0003d4 9340 0143                 	sts out_offset, lenght
0003d6 ef6f                      	ldi CRCLo, 0xff
0003d7 ef5f                      	ldi CRCHi, 0xff
0003d8 9100 0143                 	lds temp, out_offset
                                 	main_loop:					; Передача пакета
0003da 9139                      	ld msg, Y+
0003db 930f
0003dc 931f
0003dd 2f03
0003de e018
0003df 2760
0003e0 9556
0003e1 9567
0003e2 f420
0003e3 ea00
0003e4 2750
0003e5 e001
0003e6 2760
0003e7 951a
0003e8 f7b9
0003e9 911f
0003ea 910f                      	crc16 msg
0003eb 930f
0003ec b10b
0003ed ff05
0003ee cffd
0003ef b93c
0003f0 910f                      	USART_Trancieve msg
0003f1 950a                      	dec temp
0003f2 f739                      	brne main_loop
0003f3 2f36                      	mov msg, CRCLo
0003f4 930f
0003f5 b10b
0003f6 ff05
0003f7 cffd
0003f8 b93c
0003f9 910f                      	USART_Trancieve msg		; Добавление CRC в передаваемый пакет
0003fa 2f35                      	mov msg, CRCHi
0003fb 930f
0003fc b10b
0003fd ff05
0003fe cffd
0003ff b93c
000400 910f                      	USART_Trancieve msg
                                 	
                                 	;ldi temp, 0x07				; Включение таймера и прерывания по его переполнению 5*256 тактов
                                 	;sts TCCR2, temp
                                 	;ldi temp, 5
                                 	;sts out_flag, temp
                                 
                                 	Modbus_end:					; Сбрасываем память для приёма следующей посылки
000401 e000                      	ldi temp,0x00
000402 9300 0122                 	sts in_count, temp	
000404 9300 0120                 	sts in_offset, temp
000406 e2c3                      	ldi YL, low(out_data)
000407 e0d1                          ldi YH, high(out_data)
000408 e0e0                      	ldi ZL, low(in_data)
000409 e0f1                          ldi ZH, high(in_data)
00040a ef6f                      	ldi CRCLo, 0xff
00040b ef5f                      	ldi CRCHi, 0xff
                                 
00040c efaf                      	ldi XL, low(0x1ff)
00040d e0b1                          ldi XH, high(0x1ff)
00040e 9611                      	adiw	X, 1
00040f f7f1                      		brne	PC-1
000410 98c0                      	cbi	PORTB,0
                                 
000411 9478                      	sei
000412 cca1                      rjmp main
                                 
                                 
                                 ADC_Conv_Complete:					; Прерывание по окончанию преобразования
                                 	;cli
000413 930f                      	push r16
000414 b70f                      	in r16, SREG
000415 930f                      	push r16
                                 	;lds razr1,ADCL
000416 b105                      	in r16,ADCH
000417 9300 0150                 	sts temperature, r16
                                 	;sts tmperature_data
                                 
                                 Vix:
                                 	/*ldi temp, 0b01100000
                                 	out ADMUX, temp
                                 	ldi temp, 0b11011100
                                 	out ADCSRA, temp*/
000419 910f                      	pop r16
00041a bf0f                      	out SREG, r16
00041b 910f                      	pop r16
                                 	;sei
00041c 9518                      reti
                                 
                                 USART_Init:          ; Настройка USART
00041d 94f8                      cli
00041e e000                      	ldi temp, high(UBRR_Value)
00041f bd00                      	out UBRRH, temp
000420 e607                      	ldi temp, low(UBRR_Value)
000421 b909                      	out UBRRL, temp
                                 
                                 	;ldi temp, (1<<UDRE)
                                 	;out UCSRA, temp
000422 e908                      	ldi temp, (1<<TXEN)|(1<<RXEN)|(1<<RXCIE);|(1<<TXCIE0)||(1<< UDRIE0)
000423 b90a                      	out UCSRB, temp
000424 e80e                      	ldi temp,(1<<URSEL)|(3<<UCSZ0)|(1<< USBS)|(0<<UPM1)|(0<<UPM0)
000425 bd00                      	out UCSRC, temp
                                 
000426 9518                      reti
                                 
                                 Temperature_Read:		; Запись значений с термистора в оперативную память
000427 930f                      	push r16
000428 e807                      	ldi temp, 0b10000111
000429 b906                      	out ADCSRA, temp
                                 	;sei
00042a b70f                      	in r16, SREG
00042b 930f                      	push r16
00042c 931f                      	push r17
00042d 932f                      	push r18
                                 
00042e 94f8                      	cli
00042f eda3                      	ldi XL,low(AI_data)
000430 e0b1                      	ldi XH,high(AI_data)
000431 e000                      	ldi r16, 0x00
000432 930d                      	st X+, r16
000433 9100 0150                 	lds r16, temperature
000435 930d                      	st X+, r16
000436 e9a3                      	ldi XL,low(DI_data)
000437 e0b1                      	ldi XH,high(DI_data)
000438 912d                      	ld r18, X+
                                 
000439 9110 014e                 	lds r17, temperature_min
00043b 1701                      	cp r16,r17
00043c f440                      	brsh temp_over_min
                                 
00043d 9110 014f                 	lds r17, temperature_max
00043f 1701                      	cp r16,r17
000440 f040                      	brlo temp_over_max
000441 7f2c                      		andi r18, 0b11111100
000442 e005                      		ldi temp, 5 ;Выключаем таймер
000443 bd05                      		out TCCR2, temp
                                 		;cbi r18,0
                                 		;cbi r18,1
000444 c008                      	rjmp temp_read_end
                                 	temp_over_min:
000445 6021                      		ori r18, 0b00000001
                                 		;andi r18, 0b11111101
                                 		;sbi r18,0
000446 e005                      		ldi temp, 5 ;Включаем таймер
000447 bd05                      		out TCCR2, temp
000448 c004                      		rjmp temp_read_end
                                 	temp_over_max:
000449 6022                      		ori r18, 0b00000010
                                 		;andi r18, 0b11111110
                                 		;sbi r18,1
00044a e005                      		ldi temp, 5 ;Включаем таймер
00044b bd05                      		out TCCR2,	 temp
00044c c000                      		rjmp temp_read_end
                                 	temp_read_end:
00044d 932e                      	st -X,r18
00044e 9478                      	sei
                                 
00044f 912f                      	pop r18
000450 911f                      	pop r17
                                 	;cli
000451 ec0f                      	ldi temp, 0b11001111
000452 b906                      	out ADCSRA, temp
                                 	;sei*/
000453 910f                      	pop r16
000454 bf0f                      	out SREG, r16
000455 910f                      	pop r16
000456 9508                      ret
                                 
                                 
                                 ;-------------Прерывание по приёму байта-----------------;
                                 USART_RXC:
000457 930f                      	push r16
000458 b70f                      	in r16, SREG
000459 930f                      	push r16
00045a 933f                      	push r19
00045b 934f                      	push r20
                                 
00045c 9140 0120                 	lds r20,in_offset
00045e 314f                      	cpi r20, BUF_LEN-1
00045f f460                      	brsh RXC_end					; защита на слишком длинный пакет
                                 
000460 b10b                      	in r16, UCSRA
000461 ff07                      	sbrs r16, RXC
000462 cff4                      	rjmp USART_RXC
                                 
                                 	in_setbyte:
000463 b10c                      	in r16, UDR					 ;Запись в буфер приёма
000464 9301                      	st Z+,r16
000465 9543                      	inc r20 
000466 9340 0120                 	sts in_offset, r20
000468 e044                      	ldi r20,READ_TIME 
000469 9340 0121                 	sts in_flag, r20
00046b c000                      	rjmp RXC_end
                                 
                                 	RXC_end:
00046c 914f                      	pop r20
00046d 913f                      	pop r19
00046e 910f                      	pop r16
00046f bf0f                      	out SREG, r16
000470 910f                      	pop r16
000471 9518                      reti
                                 
                                 /*TIMER2_OVF:							; Прерывание по переполнению 2 таймера
                                 	push r20
                                 	in r20, SREG
                                 	push r20
                                 	push r21
                                 	;
                                 	lds r20, out_flag				; Загружаем доп. байт для адекватного времени моргания
                                 	and r20,r20
                                 	breq OVF2_Flag_Null
                                 	dec r20
                                 	sts out_flag, r20
                                 	rjmp OVF2_end
                                   OVF2_Flag_Null:
                                 	;ldi XH,high(DO_data)			
                                 	;ldi XL,low(DO_data)
                                 	;ld r21, X+
                                 	;cbr r21, $10					; Заносим изменение по биту, которое в main передаётся на пин к светодиоду
                                 	;st -X, r21
                                 	ldi r20, 0						; Выключаем счётчик тактов у таймера -> выключаем таймер до необходимого момента
                                 	out TCCR2, r20
                                 	ldi r20, 5						; Заносим небходимое кол-во доп. циклов в доп. байт
                                 	sts out_flag, r20
                                   OVF2_end:
                                 	pop r21
                                 	pop r20
                                 	out SREG, r20
                                 	pop r20
                                 reti*/
                                 
                                 TIMER2_OVF:							; Таймер на проверку перехода температуры
000472 94f8                      	cli
000473 930f                      	push r16
000474 b70f                      	in r16, SREG
000475 930f                      	push r16
                                 
                                 	;ldi r16, 0b11000100
                                 	;out ADCSRA, temp
                                 
000476 931f                      	push r17
000477 932f                      	push r18
                                 	;ldi temp, 0				;Вычключаем таймер
                                 	;out TCCR1B, temp
                                 	;/*
000478 e000                      	ldi r16, 0
000479 bd05                      	out TCCR2, r16
00047a e9a3                      	ldi XL,low(DI_data)
00047b e0b1                      	ldi XH,high(DI_data)
00047c e020                      	ldi r18, 0x00
00047d 9100 0150                 	lds r16, temperature
00047f 9110 014f                 	lds r17, temperature_max
                                 
000481 1701                      	cp r16, r17
000482 f028                      	brlo over_max_confirm
000483 9110 014e                 	lds r17, temperature_min
000485 1701                      	cp r16, r17
000486 f428                      	brsh over_min_confirm
                                 
000487 c008                      	rjmp TIMER2_OVF_END
                                 	over_max_confirm:
000488 911d                      		ld r17, X+
000489 fd11                      		sbrc r17,1
00048a e022                      		ldi r18,0x02
00048b c004                      		rjmp TIMER2_OVF_END
                                 
                                 	over_min_confirm:
00048c 911d                      		ld r17, X+
00048d fd10                      		sbrc r17,0
00048e e021                      		ldi r18,0x01
00048f c000                      		rjmp TIMER2_OVF_END
                                 	TIMER2_OVF_END:
                                 	
                                 	;ldi r16, 0
                                 	;out TCCR2, r16
                                 	; Запись в пямять для индикации
000490 e5a3                      	ldi XL,low(DO_data)
000491 e0b1                      	ldi XH,high(DO_data)
000492 910d                      	ld r16, X+
                                 	;andi r18,0b00000011
                                 	;lsl r18
000493 0f22                      	lsl r18
000494 0f22                      	lsl r18
000495 0f22                      	lsl r18
000496 7e07                      	andi r16, 0b11100111
000497 2b02                      	or r16, r18
000498 930e                      	st -X,r16
                                 	;*/
                                 
000499 912f                      	pop r18
00049a 911f                      	pop r17
                                 	;ldi r16, 0b11001001
                                 	;out ADCSRA, temp
00049b 910f                      	pop r16
00049c bf0f                      	out SREG, r16
00049d 910f                      	pop r16
00049e 9478                      	sei
00049f 9518                      reti
                                 
                                 TIMER0_OVF:							; Прерывание по переполнению 0 таймера - проверка на конец пакета
0004a0 934f                      	push r20
0004a1 b74f                      	in r20, SREG
0004a2 934f                      	push r20
0004a3 9140 0121                 	lds r20, in_flag				; Цикл 4 раза проходит по времени принятия одного байта, и если новых байт на приёме нет,
0004a5 2344                      	and r20,r20						; то в in_flag заносится 0,что сигнализирует о окончании пакета
0004a6 f019                      	breq OVF0_end
0004a7 954a                      	dec r20
0004a8 9340 0121                 	sts in_flag,r20
                                   OVF0_end:
0004aa 914f                      	pop r20
0004ab bf4f                      	out SREG, r20
0004ac 914f                      	pop r20


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8A" register use summary:
x  :  47 y  :  44 z  :  43 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 301 r17: 120 r18:  37 r19: 101 r20:  56 
r21:  55 r22:  37 r23:   1 r24:  39 r25:   0 r26:  60 r27:  43 r28:   4 
r29:   4 r30:   5 r31:   5 
Registers used: 18 out of 35 (51.4%)

"ATmega8A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  12 adiw  :   1 and   :   7 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 breq  :  29 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :  23 brlt  :   0 brmi  :   0 brne  :  58 
brpl  :   0 brsh  :  21 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 
cli   :  12 cln   :   0 clr   :   1 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   1 cp    :  12 cpc   :   0 cpi   :  77 cpse  :   3 
dec   :  32 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  15 inc   :  40 ld    :  69 ldd   :   0 ldi   : 149 
lds   :  46 lpm   :   0 lsl   :   8 lsr   :   6 mov   :  22 movw  :   0 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   3 or    :   2 
ori   :   2 out   :  51 pop   :  41 push  :  41 rcall :  28 ret   :   1 
reti  :   5 rjmp  :  57 rol   :   4 ror   :   6 sbc   :   0 sbci  :   0 
sbi   :  16 sbic  :   7 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   2 
sbrs  :   4 sec   :   2 seh   :   0 sei   :  12 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :   0 sts   :  63 sub   :   4 subi  :   6 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 49 out of 110 (44.5%)

"ATmega8A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00095c   2376      0   2376    8192  29.0%
[.dseg] 0x000060 0x000253      0    339    339    1024  33.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
