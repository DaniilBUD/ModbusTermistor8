
AVRASM ver. 2.2.8  D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm Mon May 29 00:50:41 2023

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(1): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(20): warning: Use of undefined or forward referenced symbol 'AO_Data' in .equ/.set
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(21): warning: Use of undefined or forward referenced symbol 'AO_Data' in .equ/.set
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(22): warning: Use of undefined or forward referenced symbol 'AO_Data' in .equ/.set
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(24): warning: Use of undefined or forward referenced symbol 'AI_Data' in .equ/.set
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(25): warning: Use of undefined or forward referenced symbol 'AI_Data' in .equ/.set
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(2209): warning: '/*' in comment 
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(1): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(2209): warning: '/*' in comment 
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(2209): warning: '/*' in comment 
                                 
                                 .include "m8Adef.inc" ;Подключение стандартной библиотеки для работы с Atmega8
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #define _M8ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8A
                                 #pragma AVRPART ADMIN PART_NAME ATmega8A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x07
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCL	= 0x04
                                 .equ	ADCH	= 0x05
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 
                                 ; TCCR0 - Timer/Counter0 Control Register
                                 .equ	CS00	= 0	; Clock Select0 bit 0
                                 .equ	CS01	= 1	; Clock Select0 bit 1
                                 .equ	CS02	= 2	; Clock Select0 bit 2
                                 
                                 ; TCNT0 - Timer Counter 0
                                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	ADHSM	= 4	; ADC High Speed Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WTDON	= 6	; Enable watchdog
                                 .equ	RSTDISBL	= 7	; Disable reset
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ;.include "ModbusLib.inc"
                                 .list 
                                 .equ BAUD = 57600							; Скорость для UART в Бодах
                                 .equ XTAL = 16000000						; Частота в герцах
                                 .equ UBRR_value = (XTAL/(BAUD*16))-1		; Расчитывание значения для регистра UBRR
                                 
                                 .equ BUF_LEN =32							; Размер буфера для передачи данных
                                 .equ READ_TIME = 4							; Время ожидания очередного пакета данных
                                 .equ DATA_MEMORY_SIZE = 64					; Размер памяти регистров
                                 
                                 .equ POL_Hi = 0xA0							;Два байта полинома для CRC
                                 .equ POL_Lo = 0x01
                                 
                                 .equ TemprAr_Size = 120
                                 
                                 .equ Minimum = 20
                                 .equ Maximum = 40
                                 
                                 .equ devise_address		=	AO_Data+1
                                 .equ temperature_min	=	AO_Data+2
                                 .equ temperature_max	=	AO_Data+4
                                 
                                 .equ TemprAr_index		=	AI_Data
                                 .equ temperature		=	AI_Data+2
                                 
                                 .def temp = r16
                                 .def sys = r17
                                 .def function= r18
                                 .def msg = r19
                                 .def lenght = r20
                                 .def CRCHi = r21					 ; Обозначение регистров
                                 .def CRCLo = r22
                                 
                                 .macro Read_Func ; Определение функции
                                 	push r16
                                 	in r16, SREG
                                 	push r16
                                 	push r17
                                 	push r19
                                 	push r21
                                 	push r22
                                 	;cli
                                 	cpi @0,0x01									; Чтение Discrete Outputs
                                 	breq find_ReadCoils
                                 	cpi @0,0x02									; Чтение Discrete Inputs
                                 	breq find_Read_DI		
                                 	cpi @0, 0x03								; Чтение Analog Outputs
                                 	breq find_Read_AO_Registers					
                                 	cpi @0, 0x04								; Чтение Analog Inputs
                                 	breq find_Read_AI_Registers
                                 	cpi @0,0x05									; Запись одного Discrete Output
                                 	breq find_WriteOneCoil						
                                 	cpi @0, 0x06								; Запись одного Analog Output
                                 	breq find_Write_One_AO_Register				
                                 	cpi @0,0x0f									; Запись нексольких Discrete Outputs
                                 	breq find_WriteSeveralCoils					
                                 	cpi @0,0x10									; Запись нексольких Analog Outputs
                                 	breq find_Write_Several_AO_Registers
                                 
                                 	brne find_NoCommand_Error
                                 	find_ReadCoils:
                                 		rjmp ReadCoils
                                 	find_Read_DI:
                                 		rjmp Read_DI
                                 	find_Read_AO_Registers:
                                 		rjmp Read_AO_Registers
                                 	find_Read_AI_Registers:
                                 		rjmp Read_AI_Registers
                                 	find_WriteOneCoil:
                                 		rjmp WriteOneCoil
                                 	find_WriteSeveralCoils:
                                 		rjmp WriteSeveralCoils
                                 	find_Write_One_AO_Register:
                                 		rjmp Write_One_AO_Register
                                 	find_Write_Several_AO_Registers:
                                 		rjmp Write_Several_AO_Registers
                                 	find_NoCommand_Error:
                                 		rjmp NoCommand_Error
                                 
                                 ;------------------------------------		;0x01
                                 	ReadCoils:								; ЧТЕНИЕ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВЫВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RC_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RC_wrong_addres
                                 		cpi XL, 4
                                 		brsh RC_wrong_addres
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne RC_wrong_count				
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo RC_wrong_count
                                 		ldi r17,DATA_MEMORY_SIZE-2			; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh RC_wrong_count
                                 		rjmp RC_check_ok
                                 		;
                                 		RC_wrong_addres:
                                 			rjmp	WrongAddres_Error
                                 		RC_wrong_count:
                                 			rjmp	WrongValue_Error
                                 		;
                                 		RC_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		
                                 		st Y+, @0
                                 		; вычисление кол-ва байт на отправку
                                 		ldi r17, 0x00
                                 		ldi r19, 0xff
                                 		RC_calc_bytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RC_calc_bytes_end
                                 			subi r16,8
                                 			breq RC_calc_bytes_end
                                 			brne RC_calc_bytes
                                 		RC_calc_bytes_end:
                                 		st Y+, r17
                                 		inc lenght
                                 		mov r19, r17
                                 
                                 		lds r16,  low_buf_addres
                                 		ldi r17, 0x00
                                 		RC_calc_addresbytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RC_calc_addresbytes_end
                                 			subi r16,8
                                 			breq RC_calc_addresbytes_end
                                 			brne RC_calc_addresbytes
                                 		RC_calc_addresbytes_end:
                                 		
                                 		ldi XH,high(DO_data)
                                 		ldi XL,low(DO_data)
                                 		RC_addres_shift:
                                 			ld r21, X+
                                 			dec r17
                                 		brne RC_addres_shift
                                 		ld r22, X+					
                                 		cpi r16, 0x00
                                 		breq RC_shift_end
                                 		RC_shift:							; Выполняем свдиг до необходимого адреса в регистре
                                 			lsr r22
                                 			ror r21
                                 			dec r16
                                 		brne RC_shift
                                 		RC_shift_end:
                                 		ld r16,-X
                                 		ldi r16, 0x00
                                 		lds r17, buf_bytes_count			; Дополняем пакет данными
                                 		RC_bytes_mask:
                                 			sec
                                 			rol r16
                                 			dec r17
                                 		brne RC_bytes_mask
                                 		RC_Read_DI:
                                 			and r21, r16
                                 			st Y+, r21
                                 			inc lenght
                                 			mov r21, r22
                                 			ld r22, X+
                                 			dec r19
                                 		brne RC_Read_DI
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 ;------------------------------------		; 0x02
                                 	Read_DI:								; ЧТЕНИЕ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RDI_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RDI_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE
                                 		brsh RDI_wrong_addres
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne RDI_wrong_count				
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo RDI_wrong_count
                                 		ldi r17,DATA_MEMORY_SIZE-2			; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh RDI_wrong_count
                                 		rjmp RDI_check_ok
                                 		;
                                 		RDI_wrong_addres:
                                 			rjmp	WrongAddres_Error
                                 		RDI_wrong_count:
                                 			rjmp	WrongValue_Error
                                 		;
                                 		RDI_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		
                                 		st Y+, @0
                                 		; вычисление кол-ва байт на отправку
                                 		ldi r17, 0x00
                                 		ldi r19, 0xff
                                 		RDI_calc_bytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RDI_calc_bytes_end
                                 			subi r16,8
                                 			breq RDI_calc_bytes_end
                                 			brne RDI_calc_bytes
                                 		RDI_calc_bytes_end:
                                 		st Y+, r17
                                 		inc lenght
                                 		mov r19, r17
                                 
                                 		lds r16,  low_buf_addres
                                 		ldi r17, 0x00
                                 		RDI_calc_addresbytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RDI_calc_addresbytes_end
                                 			subi r16,8
                                 			breq RDI_calc_addresbytes_end
                                 			brne RDI_calc_addresbytes
                                 		RDI_calc_addresbytes_end:
                                 		
                                 		ldi XH,high(DI_data)
                                 		ldi XL,low(DI_data)
                                 		RDI_addres_shift:
                                 			ld r21, X+
                                 			dec r17
                                 		brne RDI_addres_shift
                                 		ld r22, X+					
                                 		cpi r16, 0x00
                                 		breq RDI_shift_end
                                 		RDI_shift:							; Выполняем свдиг до необходимого адреса в регистре
                                 			lsr r22
                                 			ror r21
                                 			dec r16
                                 		brne RDI_shift
                                 		RDI_shift_end:
                                 		ld r16,-X
                                 		ldi r16, 0x00
                                 		lds r17, buf_bytes_count			; Дополняем пакет данными
                                 		RDI_bytes_mask:
                                 			sec
                                 			rol r16
                                 			dec r17
                                 		brne RDI_bytes_mask
                                 		RDI_Read_DI:
                                 			and r21, r16
                                 			st Y+, r21
                                 			inc lenght
                                 			mov r21, r22
                                 			ld r22, X+
                                 			dec r19
                                 		brne RDI_Read_DI
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 ;-------------------------------------------; 0x03
                                 	Read_AO_Registers:						; ЧТЕНИЕ АНАЛОГОВЫХ ВЫВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RAO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RAO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh RAO_wrong_addres
                                 		;RAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne RAO_wrong_count
                                 		cpi r16, 0x01
                                 		brlo RAO_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh RAO_wrong_count
                                 		rjmp RAO_check_ok
                                 		;
                                 		RAO_wrong_addres:					; Переход в ошибки
                                 			rjmp	WrongAddres_Error
                                 		RAO_wrong_count:
                                 			rjmp	WrongAddres_Error
                                 		;
                                 		RAO_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		st Y+, @0
                                 		add r16, r16
                                 		st Y+, r16
                                 		lds r16,buf_bytes_count
                                 		inc lenght
                                 		ldi XH,high(AO_data)
                                 		ldi XL,low(AO_data)
                                 		lds r19, low_buf_addres
                                 		;sts temp_sram, r19
                                 		cpi r19,0x00
                                 		breq RAO_read_AO
                                 		RAO_addres_shift:
                                 			ld r17, X+
                                 			ld r17, X+
                                 			dec r19
                                 		brne RAO_addres_shift
                                 		RAO_read_AO:
                                 			ld r17, X+
                                 			;sts temp_sram, r17
                                 			st Y+, r17
                                 			inc lenght
                                 			ld r17, X+
                                 			st Y+, r17
                                 			inc lenght
                                 			dec r16
                                 		brne RAO_read_AO
                                 		rjmp Read_Func_end
                                 
                                 ;-------------------------------------------; 0x04
                                 	Read_AI_Registers:						; ЧТЕНИЕ АНАЛОГОВЫХ ВВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RAI_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RAI_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh RAI_wrong_addres
                                 		;RAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne RAI_wrong_count
                                 		cpi r16, 0x01
                                 		brlo RAI_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh RAI_wrong_count
                                 		rjmp RAI_check_ok
                                 		;
                                 		RAI_wrong_addres:					; Переход в ошибки
                                 			rjmp	WrongAddres_Error
                                 		RAI_wrong_count:
                                 			rjmp	WrongAddres_Error
                                 		;
                                 		RAI_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		st Y+, @0
                                 		add r16, r16
                                 		st Y+, r16
                                 		lds r16,buf_bytes_count
                                 		inc lenght
                                 		ldi XH,high(AI_data)
                                 		ldi XL,low(AI_data)
                                 		lds r19, low_buf_addres
                                 		;sts temp_sram, r19
                                 		cpi r19,0x00
                                 		breq RAO_read_AO
                                 		RAI_addres_shift:
                                 			ld r17, X+
                                 			ld r17, X+
                                 			dec r19
                                 		brne RAI_addres_shift
                                 		RAI_read_AO:
                                 			ld r17, X+
                                 			;sts temp_sram, r17
                                 			st Y+, r17
                                 			inc lenght
                                 			ld r17, X+
                                 			st Y+, r17
                                 			inc lenght
                                 			dec r16
                                 		brne RAI_read_AO
                                 		rjmp Read_Func_end
                                 
                                 ;------------------------------------------ ;0x05
                                 	WriteOneCoil:							; ЗАПИСЬ ЗНАЧЕНИЯ В ОДИН ДИСКРЕТНЫЙ ВЫВОД
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WOC_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo WOC_wrong_addres
                                 		cpi XL, 6
                                 		brsh WOC_wrong_addres
                                 		;WOC_Value_check:
                                 		ld r17, Z+							; Проверка вводимого значения
                                 		ld r16, Z+
                                 		cpi XL,5
                                 		breq WOC_reset_request
                                 		cpi r16,0x00
                                 		brne WOC_wrong_count
                                 		cpi r17,0x00
                                 		breq WOC_count_ok
                                 		cpi r17,0xff
                                 		breq WOC_count_ok
                                 		rjmp WOC_wrong_count
                                 			
                                 		WOC_count_ok:
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			ldi r22,0x01
                                 			mov r21, XL
                                 			cpi r21, 0x00
                                 			breq WOC_shift_end
                                 			WOC_shift:
                                 				lsl r22
                                 				dec r21
                                 			brne WOC_shift
                                 			WOC_shift_end:
                                 			
                                 			ldi XH,high(DO_data)
                                 			ldi XL,low(DO_data)
                                 
                                 			cpi r17, 0xff
                                 			brne clr_WOC
                                 				ld r16, X+
                                 				or r16, r22
                                 				st -X,r16
                                 				sts out_offset, lenght
                                 				rjmp Read_Func_end
                                 			clr_WOC:
                                 				com r22
                                 				ld r16, X+ ;PORTC
                                 				and r16, r22
                                 				st -X,r16	;PORTC
                                 				sts out_offset, lenght
                                 				rjmp Read_Func_end
                                 			WOC_reset_request:
                                 				cpi r17, 0xff
                                 				brne WOC_wrong_count
                                 				rjmp Reset
                                 		WOC_wrong_addres:
                                 			rjmp	WrongAddres_Error
                                 		WOC_wrong_count:
                                 			rjmp	WrongValue_Error
                                 ;-------------------------------------------;0x06
                                 	Write_One_AO_Register:					; ЗАПИСЬ ОДНОГО АНАЛОГОВОГО ВЫВОДА
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne W1AO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo W1AO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh W1AO_wrong_addres
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		rjmp W1AO_check_ok
                                 		;
                                 		W1AO_wrong_addres:
                                 			rjmp	WrongAddres_Error
                                 		W1AO_Wrong_Value:
                                 			rjmp	WrongValue_Error
                                 		;
                                 		W1AO_check_ok:
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			mov r19, XL
                                 			ldi XH,high(AO_data)
                                 			ldi XL,low(AO_data)
                                 		/*	cpi r19,0x00
                                 			breq W1AO_writeEEPROM_DevAdd
                                 			cpi r19,0x01
                                 			breq W1AO_writeEEPROM_TemMin
                                 			cpi r19,0x02
                                 			breq W1AO_writeEEPROM_TemMax*/
                                 			rjmp W1AO_input_data
                                 
                                 			/*
                                 			;Ввод в EEPROM
                                 			;Ввод нового адреса устройства
                                 			W1AO_writeEEPROM_DevAdd:
                                 				cpi r16, 0x00
                                 					breq W1AO_Wrong_Value
                                 				cpi r16, 0xF8
                                 					brsh W1AO_Wrong_Value
                                 				sts eeprom_data, r16
                                 				ldi r21,0x00
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts devise_address, r16
                                 				;EEWrite r16
                                 				rjmp W1AO_input_data
                                 			;Ввод нижней границы температуры
                                 			W1AO_writeEEPROM_TemMin:
                                 				lds r21,temperature_max
                                 				cp r16, r21
                                 					brlo W1AO_Wrong_Value
                                 				;EEWrite r16
                                 				sts eeprom_data, r16
                                 				ldi r21,0x01
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts temperature_min, r16
                                 				rjmp W1AO_input_data
                                 			;Ввод верхней границы температуры
                                 			W1AO_writeEEPROM_TemMax:
                                 				lds r21,temperature_min
                                 				cp r16, r21
                                 					brsh W1AO_Wrong_Value
                                 				;EEWrite r16
                                 				sts eeprom_data, r16
                                 				ldi r21,0x02
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts temperature_max, r16
                                 				rjmp W1AO_input_data
                                 
                                 				*/
                                 
                                 			W1AO_input_data:
                                 			cpi r19,0x00
                                 				breq W1AO_write_AO
                                 			W1AO_addres_shift:
                                 				ld r21, X+
                                 				ld r21, X+
                                 				dec r19
                                 			brne W1AO_addres_shift
                                 			W1AO_write_AO:
                                 				st X+, r17
                                 				st X+, r16
                                 			rjmp Read_Func_end
                                 
                                 ;-------------------------------------------;0x0F
                                 	WriteSeveralCoils:						; ЗАПИСЬ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВЫВОДОВ	
                                 
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WSC_Wrong_Addres
                                 		cpi XL, 0x00
                                 		brlo WSC_Wrong_Addres
                                 		cpi XL, 5
                                 		brsh WSC_Wrong_Addres
                                 		
                                 		sts high_buf_addres, XH 
                                 		sts low_buf_addres, XL 
                                 
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne WSC_Wrong_Count
                                 		sts high_buf_registers_count, r16
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo WSC_Wrong_Count
                                 		ldi r17,6							; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh WSC_Wrong_Count
                                 		sts low_buf_registers_count, r16
                                 		ld r17,Z+
                                 		sts buf_bytes_count,r17				; Проверка кол-ва следующих байтов
                                 		cpi r17, 0							; если кол-во равно 0, то присвоить 1
                                 		brne WSC_CheckBytesCount
                                 			inc r17
                                 			sts buf_bytes_count,r17
                                 			rjmp WSC_CheckEnd
                                 		WSC_CheckBytesCount:
                                 			
                                 			ldi r19, 8
                                 			mul r19, r17
                                 
                                 			cp r19, r16
                                 			brlo WSC_Wrong_Value
                                 			subi r19,8
                                 			cp r19, r16
                                 			brsh WSC_Wrong_Value
                                 			sts buf_bytes_count,r17
                                 			rjmp WSC_CheckEnd
                                 		;
                                 		WSC_Wrong_Addres:					; Переход при ошибке
                                 			rjmp	WrongAddres_Error
                                 		WSC_Wrong_Count:
                                 			rjmp	WrongValue_Error
                                 		WSC_Wrong_Value:
                                 			rjmp	WrongCount_Error
                                 		;
                                 		ldi XH,high(DO_data)
                                 		ldi XL,low(DO_data)
                                 		WSC_CheckEnd:						; Окончание проверки
                                 			lds r16, low_buf_addres			; Адрес первого DO
                                 			lds r17, low_buf_registers_count; Количество записываемых DO
                                 			lds r23, buf_bytes_count
                                 		WSC_setbytes_loop:					; Цикл прохода по введённым байтам
                                 			ldi r19,0xff
                                 			ld r19,Z+
                                 			cpi r17, 8
                                 			brsh WCS_shift_MT8		
                                 			WSC_OneShift:
                                 				ld r21, X+ ; in r21, PORTC
                                 				cpi r16,0
                                 				breq WSC_AddShift_end
                                 			WSC_AddShift:
                                 				lsr r21
                                 				ror r22
                                 				dec r16
                                 			brne WSC_AddShift
                                 				lds r16, low_buf_addres
                                 			WSC_AddShift_sec:
                                 				lsl r22
                                 				rol r19
                                 				dec r16
                                 			brne WSC_AddShift_sec
                                 				lds r16, low_buf_addres
                                 			WSC_AddShift_third:
                                 				lsl r21
                                 				dec r16
                                 			brne WSC_AddShift_third
                                 			WSC_AddShift_end:
                                 				lds r16, low_buf_addres
                                 				add r16,r17
                                 				ldi r17, 8
                                 				sub r17, r16
                                 				mov r16,r17
                                 			WSC_RightByteShift:
                                 				lsl r19
                                 				dec r16
                                 			brne WSC_RightByteShift
                                 				mov r16,r17
                                 				ldi r22,0x00
                                 			WSC_RightByteShift_sec:
                                 				lsl r21
                                 				rol r22
                                 				dec r16
                                 			brne WSC_RightByteShift_sec
                                 				mov r16,r17
                                 			WSC_RightByteShift_third:
                                 				lsr r22
                                 				ror r19
                                 				dec r16
                                 			brne WSC_RightByteShift_third
                                 				ldi XH,high(DO_data)
                                 				ldi XL,low(DO_data)
                                 				st X, r19	;out PORTC, r19	
                                 				rjmp WCS_shift_end
                                 			WCS_shift_MT8:
                                 				ldi XH,high(DO_data)
                                 				ldi XL,low(DO_data)
                                 				ld r22, X+	; in r22,PORTC
                                 				and r22,r19
                                 				st -X, r22	; out PORTC,r22
                                 				subi r17,8				
                                 			WCS_shift_end:
                                 			pop r17
                                 			lds r17, buf_bytes_count
                                 			dec r17
                                 			sts buf_bytes_count, r17
                                 			push r17
                                 		brne WSC_setbytes_loop
                                 		st Y+, function
                                 		lds r16, high_buf_addres
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, low_buf_addres
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, high_buf_registers_count
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, low_buf_registers_count
                                 		st Y+, r16
                                 		inc lenght
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 
                                 ;-------------------------------------------; 0x10 ЗАПИСЬ НЕСКОЛЬКИХ АНАЛОГОВЫХ ВЫВОДОВ
                                 	Write_Several_AO_Registers:
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WSAO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo WSAO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh WSAO_wrong_addres
                                 		;WSAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne WSAO_wrong_count
                                 		cpi r16, 0x01
                                 		brlo WSAO_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh WSAO_wrong_count
                                 		ld r19, Z+
                                 		mov r21, r16
                                 		add r21, r16
                                 		cp r21, r19
                                 		brne WSAO_wrong_count
                                 		rjmp WSAO_check_ok
                                 		;
                                 		WSAO_wrong_addres:					; При ошибке передходим в exception
                                 			rjmp	WrongAddres_Error
                                 		WSAO_wrong_count:
                                 			rjmp	WrongAddres_Error
                                 		;
                                 		WSAO_check_ok:
                                 			sts high_buf_addres, XH 
                                 			sts low_buf_addres, XL 
                                 			sts buf_bytes_count, r19
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			ldi XH,high(AO_data)
                                 			ldi XL,low(AO_data)
                                 			lds r21, low_buf_addres
                                 			add r21, r21
                                 			cpi r21, 0x00
                                 			breq WSAO_write_AO_bytes
                                 			WSAO_addres_shift:
                                 				ld r22,X+
                                 				dec r21
                                 				brne WSAO_addres_shift
                                 			WSAO_write_AO_bytes:
                                 				ld r22, Z+
                                 				st X+, r22
                                 				dec r19
                                 			brne WSAO_write_AO_bytes
                                 			;ldi	r19,	0x01
                                 			;lds	eeprom_flag,	r19
                                 			rjmp Read_Func_end
                                 
                                 ;--------------- ВЫВОД ОШИБОК------------------------;
                                 	NoCommand_Error:						 
                                 		Func_Error @0,1
                                 		rjmp Read_Func_end
                                 	WrongAddres_Error:
                                 		Func_Error @0,2
                                 		rjmp Read_Func_end
                                 	WrongValue_Error:
                                 		Func_Error @0,3
                                 		rjmp Read_Func_end
                                 	WrongCount_Error:
                                 		Func_Error @0,3
                                 		rjmp Read_Func_end
                                   Read_Func_end:
                                 	pop r22
                                 	pop r21
                                 	pop r19
                                 	pop r17
                                 	pop r16
                                 	out SREG, r16
                                 	pop r16
                                 	;sei
                                 .endm
                                 
                                 
                                 .macro Func_Error		; @0 - код изначальной функции, @1 - excepction код
                                 	push r19
                                 		ldi r19, 0x80
                                 		add r19, @0
                                 		st Y+, r19
                                 		ldi r19, @1
                                 		st Y+, r19
                                 		lds r19, out_offset
                                 		inc r19
                                 		sts out_offset, r19
                                 		inc lenght
                                 	pop r19
                                 .endm
                                 
                                 .macro crc16  ; Вычисление СRC по каждому байту (передаётся регистр)
                                 	push r16
                                 	push r17
                                 
                                 	mov r16, @0
                                 	ldi r17, 8
                                 	eor CRCLo, r16
                                 	crc_loop:
                                 	
                                 	LSR CRCHi
                                 	ROR CRCLo
                                 	brcc zer1
                                 
                                 	ldi r16, POL_Hi
                                 	eor CRCHi, r16
                                 	ldi r16, POL_Lo
                                 	eor CRCLo, r16
                                 
                                 	zer1:
                                 	dec r17
                                 	brne crc_loop
                                 
                                 	pop r17
                                 	pop r16
                                 
                                 .endm
                                 
                                 .macro USART_Trancieve // Передача одного байта
                                 push r16
                                 trans_loop:
                                 	in r16, UCSRA
                                 	sbrs r16, UDRE					; Проверяем, не занят ли буфер передачи USART
                                 	rjmp trans_loop
                                 	out UDR,@0						; Передаём байт+
                                 pop r16
                                 .endm
                                 
                                 ;Чтение из EEPROM
                                 .macro EERead				; @0 - Address byte
                                 	EERead_loop:
                                 	sbic 	EECR,EEWE		; Ждем пока будет завершена прошлая запись.
                                 	rjmp	EERead_loop		; также крутимся в цикле.
                                 	push	r16
                                 	PushSREG
                                 	;cli
                                 	;push r16
                                 	push r24
                                 
                                 	ldi		r24, 0x00
                                 	out		EEARH, r24		; загружаем адрес нужной ячейки
                                 	ldi		r24, @0
                                 	out 	EEARL, r24
                                 	;out  	EEARH, low(@0) 		; его старшие и младшие байты
                                 	sbi 	EECR,EERE 		; Выставляем бит чтения
                                 	in 		r24, EEDR 		; Забираем из регистра данных результат
                                 	sts eeprom_data, r24
                                 	nop
                                 	nop
                                 	nop
                                 	nop
                                 	pop r24
                                 	;pop	r16
                                 	PopSREG
                                 	pop		r16
                                 	;sei
                                 .endm
                                 
                                 ;Запись в EEPROM
                                 .macro EEWrite				; @0 - Address byte, @1 - Data
                                 	EEWrite_loop:
                                 	sbic	EECR,EEWE		; Ждем готовности памяти к записи. Крутимся в цикле
                                 	rjmp	EEWrite_loop 		; до тех пор пока не очистится флаг EERE
                                  
                                 	;cli				; Затем запрещаем прерывания.
                                 	push	r16
                                 	PushSREG
                                 	push	r23
                                 	push	r24
                                 	;push r17
                                 	;push r21
                                 	ldi		r24, 0x00
                                 	out		EEARH, r24
                                 	lds		r24,	eeprom_address
                                 	;mov		r24, @0
                                 	out 	EEARL, r24 		; Загружаем адрес нужной ячейки
                                 	;ldi		r16, high(@0)
                                 	;out 	EEARH, r16  		; старший и младший байт адреса
                                 	lds		r24,	eeprom_data
                                 	out 	EEDR,	r24;@1 		; и сами данные, которые нам нужно загрузить
                                 
                                 	sbi 	EECR,EEMWE		; взводим предохранитель
                                 	sbi 	EECR,EEWE		; записываем байт
                                 	nop
                                 	nop
                                 	nop
                                 	nop
                                 	;pop r21
                                 	;pop r17
                                 	pop r24
                                 	pop	r23
                                 	;sei 				    ; разрешаем прерывания
                                 	PopSREG
                                 	pop		r16
                                 .endm 				        ; возврат из процедуры
                                  
                                 
                                  ;	Сохранение регистра SREG в стек
                                  .macro PushSREG
                                 	;push r16
                                 	in r16, SREG
                                 	push r16
                                 	ldi r16,0x00
                                 	out SREG, r16
                                 .endm
                                 ;	И его выгрузка из стека
                                 .macro PopSREG
                                 	pop r16
                                 	out SREG, r16
                                 	;pop r16
                                 .endm
                                  
                                 ; Блок Данных
                                 .dseg 
                                 .org $100
                                 ;temp_sram: .BYTE 1
                                 ;temperature: .BYTE 1
                                 
000100                           in_data: .BYTE BUF_LEN				; Буфер принятых данных
000120                           in_offset: .BYTE 1					; Смещение в буфере при принятии
000121                           in_flag: .BYTE 1					; флаг для чтения пакета(0 при конце пакета)
000122                           in_count: .BYTE 1					; число принятых байтов
                                 
000123                           out_data: .BYTE BUF_LEN				; Буфер данных для отправки
000143                           out_offset: .BYTE 1					; Смещение в буфере при передаче
000144                           out_flag: .BYTE 1					; Флаг по окончании передачи пакета
000145                           high_buf_addres: .BYTE 1			; Буфер для первого адреса
000146                           low_buf_addres: .BYTE 1
000147                           high_buf_registers_count: .BYTE 1	; Буфер для хранения количества регистров
000148                           low_buf_registers_count: .BYTE 1
000149                           buf_bytes_count: .BYTE 1			; Буфер для хранения количества передаваемых байтов
                                 
00014a                           eeprom_data: .BYTE 1
00014b                           eeprom_address: .BYTE 1
00014c                           eeprom_flag: .BYTE 1
                                 
00014d                           system_reg:	.BYTE 1
                                 ;TemprAr_index:	.BYTE 1
00014e                           prev_devise_address: .BYTE 1				; Адрес устройства
00014f                           prev_temperature_min: .BYTE 2	
000151                           prev_temperature_max: .BYTE 2
                                 ;temperature: .BYTE 2
                                 ;temperature_data: .BYTE 2			; Дынные с датчика температуры
                                 
000153                           DO_data: .BYTE DATA_MEMORY_SIZE					; Discrete Output Coils (чтение/запись)
000193                           DI_data: .BYTE DATA_MEMORY_SIZE					; Discrete Input Coils (чтение)
0001d3                           AI_data: .BYTE DATA_MEMORY_SIZE					; Analog Input Coils (чтение)
000213                           AO_data: .BYTE DATA_MEMORY_SIZE					; Analog Output Coils (чтение/запись)
                                 
                                 ; Блок кода
                                 .cseg
                                 		 .org $000        	; (RESET) 
000000 c087                               RJMP Reset
                                 		 ;.org $004
                                 		 ;RJMP TIMER2_OVF
                                 		 .org $008
000008 c5af                      		 RJMP TIMER1_OVF
                                 		 .org $009
000009 c5e5                      		 RJMP TIMER0_OVF
                                 		 .org $00b
00000b c57c                      		 rjmp USART_RXC
                                 		 .org $00E
00000e c50f                      		 rjmp ADC_Conv_Complete
                                 
                                 		 /*
                                 TempAr_Temp:
                                 .db		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,
                                 		50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,
                                 		100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119, 120
                                 ;*/
                                 TemprAr_Values:
00000f 03e2                      .dw		0b0000001111100010	;0
000010 03e0                      .dw		0b0000001111100000	;1
000011 03df                      .dw		0b0000001111011111	;2
000012 03dd                      .dw		0b0000001111011101	;3
000013 03db                      .dw		0b0000001111011011	;4
000014 03d9                      .dw		0b0000001111011001	;5
000015 03d8                      .dw		0b0000001111011000	;6
000016 03d6                      .dw		0b0000001111010110	;7
000017 03d4                      .dw		0b0000001111010100	;8
000018 03d1                      .dw		0b0000001111010001	;9
000019 03cf                      .dw		0b0000001111001111	;10
00001a 03cd                      .dw		0b0000001111001101	;11
00001b 03ca                      .dw		0b0000001111001010	;12
00001c 03c8                      .dw		0b0000001111001000	;13
00001d 03c5                      .dw		0b0000001111000101	;14
00001e 03c3                      .dw		0b0000001111000011	;15
00001f 03c0                      .dw		0b0000001111000000	;16
000020 03bd                      .dw		0b0000001110111101	;17
000021 03ba                      .dw		0b0000001110111010	;18
000022 03b7                      .dw		0b0000001110110111	;19
000023 03b4                      .dw		0b0000001110110100	;20
000024 03b1                      .dw		0b0000001110110001	;21
000025 03ad                      .dw		0b0000001110101101	;22
000026 03aa                      .dw		0b0000001110101010	;23
000027 03a6                      .dw		0b0000001110100110	;24
000028 03a2                      .dw		0b0000001110100010	;25
000029 039f                      .dw		0b0000001110011111	;26
00002a 039b                      .dw		0b0000001110011011	;27
00002b 0397                      .dw		0b0000001110010111	;28
00002c 0392                      .dw		0b0000001110010010	;29
00002d 038e                      .dw		0b0000001110001110	;30
00002e 038a                      .dw		0b0000001110001010	;31
00002f 0385                      .dw		0b0000001110000101	;32
000030 0381                      .dw		0b0000001110000001	;33
000031 037c                      .dw		0b0000001101111100	;34
000032 0377                      .dw		0b0000001101110111	;35
000033 0372                      .dw		0b0000001101110010	;36
000034 036d                      .dw		0b0000001101101101	;37
000035 0368                      .dw		0b0000001101101000	;38
000036 0362                      .dw		0b0000001101100010	;39
000037 035d                      .dw		0b0000001101011101	;40
000038 0357                      .dw		0b0000001101010111	;41
000039 0352                      .dw		0b0000001101010010	;42
00003a 034c                      .dw		0b0000001101001100	;43
00003b 0346                      .dw		0b0000001101000110	;44
00003c 0340                      .dw		0b0000001101000000	;45
00003d 033a                      .dw		0b0000001100111010	;46
00003e 0334                      .dw		0b0000001100110100	;47
00003f 032d                      .dw		0b0000001100101101	;48
000040 0327                      .dw		0b0000001100100111	;49
000041 0320                      .dw		0b0000001100100000	;50
000042 031a                      .dw		0b0000001100011010	;51
000043 0313                      .dw		0b0000001100010011	;52
000044 030c                      .dw		0b0000001100001100	;53
000045 0305                      .dw		0b0000001100000101	;54
000046 02fe                      .dw		0b0000001011111110	;55
000047 02f7                      .dw		0b0000001011110111	;56
000048 02f0                      .dw		0b0000001011110000	;57
000049 02e9                      .dw		0b0000001011101001	;58
00004a 02e1                      .dw		0b0000001011100001	;59
00004b 02da                      .dw		0b0000001011011010	;60
00004c 02d2                      .dw		0b0000001011010010	;61
00004d 02cb                      .dw		0b0000001011001011	;62
00004e 02c3                      .dw		0b0000001011000011	;63
00004f 02bb                      .dw		0b0000001010111011	;64
000050 02b4                      .dw		0b0000001010110100	;65
000051 02ac                      .dw		0b0000001010101100	;66
000052 02a4                      .dw		0b0000001010100100	;67
000053 029c                      .dw		0b0000001010011100	;68
000054 0294                      .dw		0b0000001010010100	;69
000055 028c                      .dw		0b0000001010001100	;70
000056 0285                      .dw		0b0000001010000101	;71
000057 027d                      .dw		0b0000001001111101	;72
000058 0275                      .dw		0b0000001001110101	;73
000059 026d                      .dw		0b0000001001101101	;74
00005a 0265                      .dw		0b0000001001100101	;75
00005b 025d                      .dw		0b0000001001011101	;76
00005c 0254                      .dw		0b0000001001010100	;77
00005d 024c                      .dw		0b0000001001001100	;78
00005e 0244                      .dw		0b0000001001000100	;79
00005f 023c                      .dw		0b0000001000111100	;80
000060 0234                      .dw		0b0000001000110100	;81
000061 022d                      .dw		0b0000001000101101	;82
000062 0225                      .dw		0b0000001000100101	;83
000063 021d                      .dw		0b0000001000011101	;84
000064 0215                      .dw		0b0000001000010101	;85
000065 020d                      .dw		0b0000001000001101	;86
000066 0205                      .dw		0b0000001000000101	;87
000067 01fd                      .dw		0b0000000111111101	;88
000068 01f6                      .dw		0b0000000111110110	;89
000069 01ee                      .dw		0b0000000111101110	;90
00006a 01e6                      .dw		0b0000000111100110	;91
00006b 01df                      .dw		0b0000000111011111	;92
00006c 01d7                      .dw		0b0000000111010111	;93
00006d 01d0                      .dw		0b0000000111010000	;94
00006e 01c8                      .dw		0b0000000111001000	;95
00006f 01c1                      .dw		0b0000000111000001	;96
000070 01ba                      .dw		0b0000000110111010	;97
000071 01b2                      .dw		0b0000000110110010	;98
000072 01ab                      .dw		0b0000000110101011	;99
000073 01a4                      .dw		0b0000000110100100	;100
000074 019d                      .dw		0b0000000110011101	;101
000075 0196                      .dw		0b0000000110010110	;102
000076 0190                      .dw		0b0000000110010000	;103
000077 0189                      .dw		0b0000000110001001	;104
000078 0182                      .dw		0b0000000110000010	;105
000079 017b                      .dw		0b0000000101111011	;106
00007a 0175                      .dw		0b0000000101110101	;107
00007b 016e                      .dw		0b0000000101101110	;108
00007c 0168                      .dw		0b0000000101101000	;109
00007d 0162                      .dw		0b0000000101100010	;110
00007e 015c                      .dw		0b0000000101011100	;111
00007f 0156                      .dw		0b0000000101010110	;112
000080 0150                      .dw		0b0000000101010000	;113
000081 014a                      .dw		0b0000000101001010	;114
000082 0144                      .dw		0b0000000101000100	;115
000083 013e                      .dw		0b0000000100111110	;116
000084 0138                      .dw		0b0000000100111000	;117
000085 0133                      .dw		0b0000000100110011	;118
000086 012d                      .dw		0b0000000100101101	;119
000087 0128                      .dw		0b0000000100101000	;120
                                 
                                 /*
                                 
                                 0		0000001111100010
                                 1		0000001111100000
                                 2		0000001111011111
                                 3		0000001111011101
                                 4		0000001111011011
                                 5		0000001111011001
                                 6		0000001111011000
                                 7		0000001111010110
                                 8		0000001111010100
                                 9		0000001111010001
                                 10		0000001111001111
                                 11		0000001111001101
                                 12		0000001111001010
                                 13		0000001111001000
                                 14		0000001111000101
                                 15		0000001111000011
                                 16		0000001111000000
                                 17		0000001110111101
                                 18		0000001110111010
                                 19		0000001110110111
                                 20		0000001110110100
                                 21		0000001110110001
                                 22		0000001110101101
                                 23		0000001110101010
                                 24		0000001110100110
                                 25		0000001110100010
                                 26		0000001110011111
                                 27		0000001110011011
                                 28		0000001110010111
                                 29		0000001110010010
                                 30		0000001110001110
                                 31		0000001110001010
                                 32		0000001110000101
                                 33		0000001110000001
                                 34		0000001101111100
                                 35		0000001101110111
                                 36		0000001101110010
                                 37		0000001101101101
                                 38		0000001101101000
                                 39		0000001101100010
                                 40		0000001101011101
                                 41		0000001101010111
                                 42		0000001101010010
                                 43		0000001101001100
                                 44		0000001101000110
                                 45		0000001101000000
                                 46		0000001100111010
                                 47		0000001100110100
                                 48		0000001100101101
                                 49		0000001100100111
                                 50		0000001100100000
                                 51		0000001100011010
                                 52		0000001100010011
                                 53		0000001100001100
                                 54		0000001100000101
                                 55		0000001011111110
                                 56		0000001011110111
                                 57		0000001011110000
                                 58		0000001011101001
                                 59		0000001011100001
                                 60		0000001011011010
                                 61		0000001011010010
                                 62		0000001011001011
                                 63		0000001011000011
                                 64		0000001010111011
                                 65		0000001010110100
                                 66		0000001010101100
                                 67		0000001010100100
                                 68		0000001010011100
                                 69		0000001010010100
                                 70		0000001010001100
                                 71		0000001010000101
                                 72		0000001001111101
                                 73		0000001001110101
                                 74		0000001001101101
                                 75		0000001001100101
                                 76		0000001001011101
                                 77		0000001001010100
                                 78		0000001001001100
                                 79		0000001001000100
                                 80		0000001000111100
                                 81		0000001000110100
                                 82		0000001000101101
                                 83		0000001000100101
                                 84		0000001000011101
                                 85		0000001000010101
                                 86		0000001000001101
                                 87		0000001000000101
                                 88		0000000111111101
                                 89		0000000111110110
                                 90		0000000111101110
                                 91		0000000111100110
                                 92		0000000111011111
                                 93		0000000111010111
                                 94		0000000111010000
                                 95		0000000111001000
                                 96		0000000111000001
                                 97		0000000110111010
                                 98		0000000110110010
                                 99		0000000110101011
                                 100		0000000110100100
                                 101		0000000110011101
                                 102		0000000110010110
                                 103		0000000110010000
                                 104		0000000110001001
                                 105		0000000110000010
                                 106		0000000101111011
                                 107		0000000101110101
                                 108		0000000101101110
                                 109		0000000101101000
                                 110		0000000101100010
                                 111		0000000101011100
                                 112		0000000101010110
                                 113		0000000101010000
                                 114		0000000101001010
                                 115		0000000101000100
                                 116		0000000100111110
                                 117		0000000100111000
                                 118		0000000100110011
                                 119		0000000100101101
                                 120		0000000100101000
                                 
                                 */
                                 ;0x00 0x04 0x04 0x00 0x34 0x03 0x1A 0x2B 0xB1
                                 Reset:
                                 
000088 e004                      ldi temp, High(Ramend)
000089 bf0e                      out sph, temp
00008a e50f                      ldi temp, Low(Ramend)
00008b bf0d                      out spl,temp
                                 
00008c ef5f                      ldi CRCHi,0xFF ; CrcIn
00008d ef6f                      ldi CRCLo,0xFF
                                 
00008e e0f0                      ldi r31,0x00
00008f e6e0                      ldi r30,0x60
000090 e002                      ldi r16,0x02
000091 e030                      ldi r19,0x00
                                 mem_cl:
000092 ef1f                        ldi r17,0xff
                                   mem_cl2:					; ОЧИЩАЕМ ПАМЯТЬ ПЕРЕД РАБОТОЙ 2*256 = 512 байт	st Z+,r19
000093 9331                      	st Z+, r19
000094 951a                      	dec r17
000095 f7e9                      	brne mem_cl2
000096 950a                        dec r16
000097 f7d1                      brne mem_cl
                                 
                                 /*
                                 ldi		r16,	0
                                 out 	EEARH,	r16
                                 ldi		r18,	0xff
                                 ldi		r16,	1
                                 out 	EEARL,	r16
                                 rcall	EEWrite_func
                                 
                                 ldi		r18,	0xff
                                 ldi		r16,	2
                                 out 	EEARL,	r16
                                 rcall	EEWrite_func
                                 
                                 ldi		r18,	0xff
                                 ldi		r16,	3
                                 out 	EEARL,	r16
                                 rcall	EEWrite_func
                                 
                                 ldi		r18,	0xff
                                 ldi		r16,	4
                                 out 	EEARL,	r16
                                 rcall	EEWrite_func
                                 */
                                 
                                 
                                 ; Настройка АЦП
000098 e400                      ldi		temp,	(0<<REFS1)|(1<<REFS0)|(0<<ADLAR)|(0<<MUX0);0b01100000
000099 b907                      out		ADMUX,	temp
00009a ec0f                      ldi		temp,	(1<<ADEN)|(1<<ADSC)/*|(0<<ADATE)*/|(0<<ADIF)|(1<<ADIE)|(7<<ADPS0);0b11001111
00009b b906                      out		ADCSRA, temp
                                 ;TIMER0 Settings
00009c e005                      ldi temp, 5
00009d bf03                      out TCCR0,temp
                                 
                                 ;TIMER1 Settings
                                 ;ldi temp, 0				; Выключаем подсчёт тактов, а включим только при необходимости
                                 ;out TCCR1B, temp
                                 
                                 ;TIMER2 Settings
00009e e000                      ldi temp, 0				; Выключаем подсчёт тактов, а включим только при необходимости
00009f bd05                      out TCCR2, temp
                                 
                                 ;ldi temp, 01			;Задаём TIMSK для всех таймеров
0000a0 e001                      ldi temp,(0<<TOIE1)|(1<<TOIE0);(1<<TOIE2)|
0000a1 bf09                      out TIMSK, temp
                                 
                                 ;ldi	temp,	high(6553)
                                 ;sts	OCR1AH,	temp
                                 ;ldi	temp,	low(6553)
                                 ;sts	OCR1AL,	temp
0000a2 2700                      clr	temp
0000a3 bd0f                      out	TCCR1A,	temp
0000a4 e000                      ldi	temp,	(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(0<<CS10)
0000a5 bd0e                      out	TCCR1B,	temp
                                 
0000a6 e308                      ldi temp, 0b00111000
0000a7 bb04                      out ddrc, temp
                                 
0000a8 e001                      ldi temp, 0b00000001
0000a9 bb07                      out ddrb, temp
0000aa 9aad                      sbi	PORTC,5
                                 
                                 ;ldi temp, 0b0010000
                                 ;out ddrd, temp
                                 /*
                                 ldi XH,high(DO_data)
                                 ldi XL,low(DO_data)
                                 st X+, temp
                                 out PORTC, temp
                                 */
0000ab e80e                      ldi temp, 0b10001110
0000ac bb01                      out ddrd, temp
0000ad 2f30                      mov msg, temp
                                 
                                 
0000ae d47a                      rcall USART_Init
                                 ;ldi temp, 0x01
                                 ;sts devise_address, temp
                                 /*
                                 ldi		temp,	0xff
                                 sts		eeprom_data,	temp
                                 ldi		sys,	0x00
                                 sts		eeprom_address,	sys
                                 EEWrite sys, temp
                                 ldi		sys,	0x01
                                 sts		eeprom_address,	sys
                                 EEWrite sys, temp
                                 ldi		sys,	0x02
                                 sts		eeprom_address,	sys
                                 EEWrite sys, temp
                                 ;*/
                                 
                                 /*
                                 ldi		r18,	0xff
                                 ldi		temp,	0x06
                                 loop_e:
                                 	dec		temp
                                 	out 	EEARL,	temp
                                 	rcall	EEWrite_func
                                 	brne	loop_e
                                 ;*/
                                 ; Чтение адреса
0000af e0b2                      ldi XH,high(AO_data)
0000b0 e1a3                      ldi XL,low(AO_data)
                                 
0000b1 99e1
0000b2 cffe
0000b3 930f
0000b4 b70f
0000b5 930f
0000b6 e000
0000b7 bf0f
0000b8 938f
0000b9 e080
0000ba bb8f
0000bb e080
0000bc bb8e
0000bd 9ae0
0000be b38d
0000bf 9380 014a
0000c1 0000
0000c2 0000
0000c3 0000
0000c4 0000
0000c5 918f
0000c6 910f
0000c7 bf0f
0000c8 910f                      EERead 0x00
0000c9 99e0                      sbic	EECR,EERE		; Ждем готовности памяти к записи. Крутимся в цикле
0000ca cffe                      rjmp	PC-1
0000cb 9100 014a                 lds temp, eeprom_data
0000cd 3f0f                      cpi temp, 0xff
0000ce f511                      brne	AdrRead_end
0000cf e001                      	ldi temp, 0x01
0000d0 e010                      	ldi sys, 0x00
0000d1 9310 014b                 	sts	eeprom_address,	sys
0000d3 9300 014a                 	sts	eeprom_data,	temp
0000d5 99e1
0000d6 cffe
0000d7 930f
0000d8 b70f
0000d9 930f
0000da e000
0000db bf0f
0000dc 937f
0000dd 938f
0000de e080
0000df bb8f
0000e0 9180 014b
0000e2 bb8e
0000e3 9180 014a
0000e5 bb8d
0000e6 9ae2
0000e7 9ae1
0000e8 0000
0000e9 0000
0000ea 0000
0000eb 0000
0000ec 918f
0000ed 917f
0000ee 910f
0000ef bf0f
0000f0 910f                      	EEWrite; sys, temp
                                 AdrRead_end:
0000f1 e010                      ldi	r17,0x00
0000f2 931d                      st	X+,	r17
0000f3 9300 0214                 sts	devise_address,	temp
0000f5 9300 014e                 sts prev_devise_address, temp
                                 
                                 
                                 ;Чтение минимального порога температуры
0000f7 99e1
0000f8 cffe
0000f9 930f
0000fa b70f
0000fb 930f
0000fc e000
0000fd bf0f
0000fe 938f
0000ff e080
000100 bb8f
000101 e081
000102 bb8e
000103 9ae0
000104 b38d
000105 9380 014a
000107 0000
000108 0000
000109 0000
00010a 0000
00010b 918f
00010c 910f
00010d bf0f
00010e 910f                      EERead 0x01
00010f 9110 014a                 lds		r17,	eeprom_data
000111 3f1f                      cpi		r17,	0xff
000112 f0d9                      	breq	TemMinRead_CLRD
000113 99e1
000114 cffe
000115 930f
000116 b70f
000117 930f
000118 e000
000119 bf0f
00011a 938f
00011b e080
00011c bb8f
00011d e082
00011e bb8e
00011f 9ae0
000120 b38d
000121 9380 014a
000123 0000
000124 0000
000125 0000
000126 0000
000127 918f
000128 910f
000129 bf0f
00012a 910f                      EERead 0x02
00012b 9100 014a                 lds		r16,	eeprom_data
00012d c014                      rjmp	TemMinRead_End
                                 
                                 	TemMinRead_CLRD:	;Если память пуста, то записываем +25
                                 	;sts		eeprom_address,	r18
                                 	;sts		eeprom_data,	r17
00012e 99e1                      	sbic 	EECR,EEWE
00012f cffe                      		rjmp	PC-1
000130 e000                      	ldi		r16,	0x00
000131 bb0f                      	out 	EEARH,	r16
000132 e001                      	ldi		r16,	0x01
000133 bb0e                      	out 	EEARL,	r16
                                 	;ldi		r17,	0b00000011	
000134 e010                      	ldi		r17,	0x00
000135 9310 0215                 	sts		temperature_min,	r17	
000137 2f21                      	mov		r18,	r17
000138 d3de                      		rcall	EEWrite_func
                                 	;sts		eeprom_address,	r18
                                 	;sts		eeprom_data,	r17
                                 	;ldi		r16,	0b10100010
                                 	;ldi		r18,	0x02
000139 99e1                      	sbic 	EECR,EEWE
00013a cffe                      		rjmp	PC-1
00013b e002                      	ldi		r16,	0x02
00013c bb0e                      	out 	EEARL,	r16
                                 	;ldi		r16,	0b10100010
00013d e104                      	ldi		r16,	Minimum
00013e 9300 0216                 	sts		temperature_min+1,	r16
000140 2f20                      	mov		r18,	r16
000141 d3d5                      		rcall	EEWrite_func
                                 
                                 TemMinRead_End:
000142 9310 0215                 sts	temperature_min,	r17
000144 9310 014f                 sts	prev_temperature_min,	r17
000146 9300 0216                 sts	temperature_min+1,	r16
000148 9300 0150                 sts	prev_temperature_min+1,	r16
                                 
                                 ;Чтение максимального порога температуры
00014a 99e1
00014b cffe
00014c 930f
00014d b70f
00014e 930f
00014f e000
000150 bf0f
000151 938f
000152 e080
000153 bb8f
000154 e083
000155 bb8e
000156 9ae0
000157 b38d
000158 9380 014a
00015a 0000
00015b 0000
00015c 0000
00015d 0000
00015e 918f
00015f 910f
000160 bf0f
000161 910f                      EERead 0x03
000162 9110 014a                 lds		r17,	eeprom_data
000164 3f1f                      cpi		r17,	0xff
000165 f0d9                      	breq	TemMaxRead_CLRD
000166 99e1
000167 cffe
000168 930f
000169 b70f
00016a 930f
00016b e000
00016c bf0f
00016d 938f
00016e e080
00016f bb8f
000170 e084
000171 bb8e
000172 9ae0
000173 b38d
000174 9380 014a
000176 0000
000177 0000
000178 0000
000179 0000
00017a 918f
00017b 910f
00017c bf0f
00017d 910f                      EERead 0x04
00017e 9100 014a                 lds		r16,	eeprom_data			
000180 c014                      rjmp	TemMaxRead_End
                                 	TemMaxRead_CLRD:	;Если память пуста, то записываем +60
000181 99e1                      	sbic 	EECR,EEWE
000182 cffe                      		rjmp	PC-1
000183 e000                      	ldi		r16,	0x00
000184 bb0f                      	out 	EEARH,	r16
000185 e003                      	ldi		r16,	0x03
000186 bb0e                      	out 	EEARL,	r16
                                 	;ldi		r17,	0b00000010
000187 e010                      	ldi		r17,	0x00
000188 9310 0217                 	sts		temperature_max,	r17	
00018a 2f21                      	mov		r18,	r17
00018b d38b                      		rcall	EEWrite_func
00018c 99e1                      	sbic 	EECR,EEWE
00018d cffe                      		rjmp	PC-1
00018e e004                      	ldi		r16,	0x04
00018f bb0e                      	out 	EEARL,	r16
                                 	;ldi		r16,	0b11011010
000190 e208                      	ldi		r16,	Maximum
000191 9300 0218                 	sts		temperature_max+1,	r16
000193 2f20                      	mov		r18,	r16
000194 d382                      		rcall	EEWrite_func
                                 	/*
                                 	ldi		r17,	0b00000010
                                 	ldi		r18,	0x03
                                 	sts		eeprom_address,	r18
                                 	sts		eeprom_data,	r17
                                 	EEWrite
                                 	ldi		r16,	0b11011010
                                 	ldi		r18,	0x04
                                 	sts		eeprom_address,	r18
                                 	sts		eeprom_data,	r17
                                 	EEWrite
                                 	*/
                                 TemMaxRead_End:
000195 9310 0217                 sts	temperature_max,	r17
000197 9310 0151                 sts	prev_temperature_max,	r17
000199 9300 0218                 sts	temperature_max+1,	r16
00019b 9300 0152                 sts	prev_temperature_max+1,	r16
                                 /*
                                 EERead 0x01
                                 lds temp, eeprom_data
                                 cpi temp, 0xff
                                 brne TemMinRead_end
                                 	ldi temp, 0b11100011 ;Нижнее ограничение диапазона температуры  +30
                                 	ldi sys, 0x01
                                 	sts	eeprom_address,	sys
                                 	sts	eeprom_data,	temp
                                 	EEWrite; sys, temp
                                 TemMinRead_end:
                                 ldi	r17,0x00
                                 st	X+,	r17
                                 st	X+,	temp
                                 sts temperature_min, temp
                                 
                                 ;Чтение максимального порога температуры
                                 EERead 0x02
                                 lds temp, eeprom_data
                                 cpi temp, 0xff
                                 brne TemMaxRead_end
                                 	ldi temp, 0b10110110 ; Верхнее ограничение диапазона температуры  +60
                                 	ldi sys, 0x02
                                 	sts	eeprom_address,	sys
                                 	sts	eeprom_data,	temp
                                 	EEWrite; sys, temp
                                 TemMaxRead_end:
                                 ldi	r17,0x00
                                 st	X+,	r17
                                 st	X+,	temp
                                 sts temperature_max, temp
                                 */
00019d 99e1                      sbic	EECR,EEWE		; Ждем готовности памяти к записи. Крутимся в цикле
00019e cffe                      rjmp	PC-1
                                 
                                 /*
                                 ; Установление min и max для температуры
                                 ldi temp, 0b11100011 ;Нижнее ограничение диапазона температуры  +30
                                 sts temperature_min, temp
                                 ldi temp, 0b10110110 ; Верхнее ограничение диапазона температуры  +60
                                 sts temperature_max, temp*/
                                 
00019f e000                      ldi temp, 0x00
0001a0 9300 014d                 sts	system_reg,	temp
0001a2 9300 0120                 sts in_offset, temp
0001a4 9300 0122                 sts in_count, temp
                                 
0001a6 e0e0                      ldi ZL, low(in_data)
0001a7 e0f1                      ldi ZH, high(in_data)
                                 
0001a8 e2c3                      ldi YL, low(out_data)
0001a9 e0d1                      ldi YH, high(out_data)
                                 
                                 /*
                                 ldi XL, low(AO_data)
                                 ldi XH, high(AO_data)
                                 ld	temp,	X+
                                 ldi	temp,	0x03
                                 st	X+,		temp
                                 */
0001aa 9aad                      sbi	PORTC,	5
0001ab 9478                      sei
                                 /*
                                 ldi ZL,low(in_data)	
                                 ldi ZH,high(in_data)
                                 ldi temp, 0x01
                                 st Z+,temp
                                 ldi temp, 0x06
                                 st Z+,temp
                                 ldi temp, 0x00
                                 st Z+,temp
                                 ldi temp, 0x01
                                 st Z+,temp
                                 ldi temp, 0x00
                                 st Z+,temp
                                 ldi temp, 0x10
                                 st Z+,temp
                                 ldi temp, 6
                                 sts in_offset, temp
                                 ;*/
                                 
                                 ;----------------------------- MAIN ---------------------------;
                                 main:
0001ac ec0f                      	ldi temp, 0b11001111
0001ad b906                      	out ADCSRA, temp
                                 	
0001ae 9100 0193                 	lds		temp,	DI_Data
0001b0 fd00                      	sbrc	temp,	0
0001b1 9aab                      		sbi		PORTC,	3
0001b2 ff00                      	sbrs	temp,	0
0001b3 98ab                      		cbi		PORTC,	3
0001b4 fd01                      	sbrc	temp,	1
0001b5 9aac                      		sbi		PORTC,	4
0001b6 ff01                      	sbrs	temp,	1
0001b7 98ac                      		cbi		PORTC,	4
                                 	/*
                                 	lds		temp,	DI_Data		; Чтение значений из пямяти дискретных выводов для индикации
                                 
                                 	lds		sys,	PORTC
                                 	cpi		temp,	0x01
                                 	brne	PC+3
                                 		sbi		PORTC,	3
                                 		rjmp	PC+2
                                 	cbi		PORTC,	3
                                 	cpi		temp,	0x02
                                 	brne	PC+3
                                 		sbi		PORTC,	4
                                 		rjmp	PC+2
                                 	cbi		PORTC,	4
                                 	*/
                                 	;sbi PORTC,5
0001b8 9892                      	cbi PORTD,2
                                 	;ld sys, X+
                                 	;ldi XL,low(DI_data)			; Опрос дискретных входов и занесение значений в память DI
                                 	;ldi XH,high(DI_data)
                                 	;in temp, PORTB
                                 	;st X+,temp
                                 	
                                 	;ldi temp, 0x20
                                 	;sts temperature, temp
                                 	;;;;;;;;;;
                                 
0001b9 d378                      	rcall Temperature_Read
                                 
                                 	;;;;;;;;;;
0001ba 94f8                      	cli
                                 	;ldi XL,low(AO_data)			; Чтение значений из пямяти аналоговых выводов для изменения еепром
                                 	;ldi XH,high(AO_data)
                                 	;lds	temp,	devise_address
                                 	;ld	sys,	X+
                                 	;ld	sys,	X+
0001bb 0000                      	nop
0001bc 0000                      	nop
                                 	/*cpi	sys,	0x00	
                                 	brne PC+4
                                 		st	-X,		temp
                                 		ld	sys,	X+
                                 		rjmp	PC+3*/
                                 	;rjmp	main_check_tempmin
0001bd 9100 0214                 	lds	temp,	devise_address
0001bf 9110 014e                 	lds	sys,	prev_devise_address
0001c1 1701                      	cp	temp,	sys
0001c2 f041                      	breq	main_check_tempmin
0001c3 e010                      		ldi		sys,	0x00
0001c4 bb1f                      		out 	EEARH,	sys
0001c5 e010                      		ldi		sys,	0x00
0001c6 bb1e                      		out 	EEARL,	sys
0001c7 2f20                      		mov		r18,	temp
0001c8 d34e                      			rcall	EEWrite_func
0001c9 9300 014e                 		sts		prev_devise_address,	temp
                                 		/*
                                 		sbi		PORTC,	5
                                 		sts		prev_devise_address,	sys
                                 		ldi		temp,	0x01
                                 		sts		eeprom_flag,	temp
                                 		sts		eeprom_data, sys
                                 		ldi		temp,	0x00
                                 		sts		eeprom_address, temp
                                 		rjmp	main_AO_check_end
                                 		*/
                                 	main_check_tempmin:
0001cb 9110 014f                 	lds		r17,	prev_temperature_min
0001cd 9100 0150                 	lds		r16,	prev_temperature_min+1
0001cf 91b0 0215                 	lds		XH,		temperature_min
0001d1 91a0 0216                 	lds		XL,		temperature_min+1
0001d3 171b                      	cp		r17,	XH
0001d4 f419                      		brne	main_check_tempmin_chgd
0001d5 170a                      	cp		r16,	XL
0001d6 f409                      		brne	main_check_tempmin_chgd
0001d7 c00e                      	rjmp	main_check_tempmax
                                 		main_check_tempmin_chgd:
0001d8 e000                      		ldi		r16,	0x00
0001d9 bb0f                      		out 	EEARH,	r16
0001da e001                      		ldi		r16,	0x01
0001db bb0e                      		out 	EEARL,	r16
0001dc 2f2b                      		mov		r18,	XH
0001dd d339                      			rcall	EEWrite_func
0001de e002                      		ldi		r16,	0x02
0001df bb0e                      		out 	EEARL,	r16
0001e0 2f2a                      		mov		r18,	XL
0001e1 d335                      			rcall	EEWrite_func
0001e2 93b0 014f                 		sts		prev_temperature_min,	XH
0001e4 93a0 0150                 		sts		prev_temperature_min+1,	XL
                                 	main_check_tempmax:
0001e6 9110 0151                 	lds		r17,	prev_temperature_max
0001e8 9100 0152                 	lds		r16,	prev_temperature_max+1
0001ea 91b0 0217                 	lds		XH,		temperature_max
0001ec 91a0 0218                 	lds		XL,		temperature_max+1
0001ee 171b                      	cp		r17,	XH
0001ef f419                      		brne	main_check_tempmax_chgd
0001f0 170a                      	cp		r16,	XL
0001f1 f409                      		brne	main_check_tempmax_chgd
0001f2 c00e                      	rjmp	main_AO_check_end
                                 		main_check_tempmax_chgd:
0001f3 e000                      		ldi		r16,	0x00
0001f4 bb0f                      		out 	EEARH,	r16
0001f5 e003                      		ldi		r16,	0x03
0001f6 bb0e                      		out 	EEARL,	r16
0001f7 2f2b                      		mov		r18,	XH
0001f8 d31e                      			rcall	EEWrite_func
0001f9 e004                      		ldi		r16,	0x04
0001fa bb0e                      		out 	EEARL,	r16
0001fb 2f2a                      		mov		r18,	XL
0001fc d31a                      			rcall	EEWrite_func
0001fd 93b0 0151                 		sts		prev_temperature_max,	XH
0001ff 93a0 0152                 		sts		prev_temperature_max+1,	XL
                                 	/*
                                 	cp	temp,	sys
                                 	rjmp	main_check_tempmax
                                 		sts		temperature_min,	sys
                                 		ldi		temp,	0x01
                                 		sts		eeprom_flag,	temp
                                 		sts		eeprom_data, sys
                                 		sts		eeprom_address, temp
                                 		rjmp	main_AO_check_end
                                 	main_check_tempmax:
                                 	lds	temp,	temperature_max
                                 	ld	sys,	X+
                                 	ld	sys,	X+
                                 	cp	temp,	sys
                                 	breq	main_AO_check_end
                                 		sts		temperature_max,	sys
                                 		ldi		temp,	0x01
                                 		sts		eeprom_flag,	temp
                                 		sts		eeprom_data, sys
                                 		ldi		temp,	0x02
                                 		sts		eeprom_address, temp
                                 	*/
                                 	main_AO_check_end:
000201 9478                      	sei
                                 	/*
                                 	lds temp, eeprom_flag
                                 	cpi temp, 0x01
                                 	brne EEPROM_write_end
                                 		;cli
                                 		;lds temp, eeprom_data
                                 		;lds sys, eeprom_address
                                 		EEWrite sys, temp
                                 		cli
                                 		clr temp
                                 		;sts eeprom_data, temp
                                 		;sts eeprom_address, temp
                                 		sts eeprom_flag, temp
                                 		sei
                                 	EEPROM_write_end:
                                 	*/
000202 9100 0120                 	lds temp, in_offset				; ждать появления первого байта
000204 2300                      	and temp,temp
000205 f021                      		breq Main_end
000206 9a97                      	sbi	PORTD,7
                                 	; Переход на приём/передачу по modbus
                                 	;ldi temp, 0b00001111			; выключаем АЦП
000207 e00f                      	ldi temp, 0b00001111
000208 b906                      	out ADCSRA, temp
000209 c001                      	rjmp MODBUS_Communication
                                 	Main_end:
00020a cfa1                      rjmp main
                                 
                                 ;--------------------------- КОНЕЦ MAIN'А---------------------;
                                 
                                 ;-------------------- ПРИЁМ/ПЕРЕДАЧА ПО MODBUS----------------;
                                 MODBUS_Communication:
                                 	;/*
00020b e0f1                      	ldi ZH, high(in_data)
00020c e0e0                      	ldi ZL, low(in_data)
00020d 9101                      	ld	temp,	Z+
                                 	;ld temp, -Z					; проверка адреса устройства
                                 	;st Z+, temp
00020e 3000                      	cpi	temp,	0
00020f f029                      	breq	wait_end
                                 
000210 9110 0214                 	lds sys, devise_address
000212 1701                      	cp	temp,	sys
000213 f009                      	breq	wait_end
000214 c2e4                      	rjmp	Modbus_end
                                 	;cpse temp, sys
                                 	;rjmp Modbus_end
                                 
                                   wait_end:
000215 9100 0121                 	lds temp, in_flag			; ждать завершения принятого пакета
000217 2300                      	and temp,temp
000218 f7e1                      	brne wait_end
                                 	
000219 94f8                      	cli
00021a 9897                      	cbi	PORTD,7
00021b e0f1                      	ldi ZH, high(in_data)
00021c e0e0                      	ldi ZL, low(in_data)
00021d 9100 0120                 	lds temp,in_offset
                                   calc_crc:
00021f 9131                      	ld msg, Z+
000220 930f
000221 931f
000222 2f03
000223 e018
000224 2760
000225 9556
000226 9567
000227 f420
000228 ea00
000229 2750
00022a e001
00022b 2760
00022c 951a
00022d f7b9
00022e 911f
00022f 910f                      	crc16 msg
000230 950a                      	dec temp
000231 f769                      	brne calc_crc
                                 
000232 e000                      	ldi temp, 0x00				; Проверка CRC
000233 1350                      	cpse CRCHi, temp
000234 c2c4                      	rjmp Modbus_end
000235 1356                      	cpse CRCHi,CRCLo
000236 c2c2                      	rjmp Modbus_end
                                 	;*/
                                   end_receive:
000237 9100 0120                 	lds temp, in_offset			; сформировать число принятых байтов
000239 950a                      	dec temp
00023a 950a                      	dec temp
00023b 9300 0122                 	sts in_count,temp
                                 
00023d e0f1                      	ldi ZH, high(in_data)	
00023e e0e0                      	ldi ZL, low(in_data)
00023f e0d1                      	ldi YH, high(out_data)
000240 e2c3                      	ldi YL, low(out_data)
                                 ;----------Запись адреса в буфер и определение modbus функции-------;
000241 9131                      	ld msg,Z+
000242 9339                      	st Y+, msg
000243 9121                      	ld function, Z+
000244 e042                      	ldi lenght, 2
                                 
000245 930f
000246 b70f
000247 930f
000248 931f
000249 933f
00024a 935f
00024b 936f
00024c 3021
00024d f079
00024e 3022
00024f f071
000250 3023
000251 f069
000252 3024
000253 f061
000254 3025
000255 f059
000256 3026
000257 f059
000258 302f
000259 f041
00025a 3120
00025b f041
00025c f441
00025d c008
00025e c055
00025f c0a2
000260 c0d5
000261 c108
000262 c163
000263 c13f
000264 c1e9
000265 c220
000266 91b1
000267 91a1
000268 30b0
000269 f479
00026a 30a0
00026b f068
00026c 30a4
00026d f458
00026e 9101
00026f 3000
000270 f449
000271 9101
000272 3001
000273 f030
000274 e31e
000275 1b1a
000276 1701
000277 f410
000278 c002
000279 c21a
00027a c227
00027b 93b0 0145
00027d 93a0 0146
00027f 9300 0149
000281 9329
000282 e010
000283 ef3f
000284 9513
000285 3008
000286 f018
000287 5008
000288 f009
000289 f7d1
00028a 9319
00028b 9543
00028c 2f31
00028d 9100 0146
00028f e010
000290 9513
000291 3008
000292 f018
000293 5008
000294 f009
000295 f7d1
000296 e0b1
000297 e5a3
000298 915d
000299 951a
00029a f7e9
00029b 916d
00029c 3000
00029d f021
00029e 9566
00029f 9557
0002a0 950a
0002a1 f7e1
0002a2 910e
0002a3 e000
0002a4 9110 0149
0002a6 9408
0002a7 1f00
0002a8 951a
0002a9 f7e1
0002aa 2350
0002ab 9359
0002ac 9543
0002ad 2f56
0002ae 916d
0002af 953a
0002b0 f7c9
0002b1 9340 0143
0002b3 c20a
0002b4 91b1
0002b5 91a1
0002b6 30b0
0002b7 f479
0002b8 30a0
0002b9 f068
0002ba 34a0
0002bb f458
0002bc 9101
0002bd 3000
0002be f449
0002bf 9101
0002c0 3001
0002c1 f030
0002c2 e31e
0002c3 1b1a
0002c4 1701
0002c5 f410
0002c6 c002
0002c7 c1cc
0002c8 c1d9
0002c9 93b0 0145
0002cb 93a0 0146
0002cd 9300 0149
0002cf 9329
0002d0 e010
0002d1 ef3f
0002d2 9513
0002d3 3008
0002d4 f018
0002d5 5008
0002d6 f009
0002d7 f7d1
0002d8 9319
0002d9 9543
0002da 2f31
0002db 9100 0146
0002dd e010
0002de 9513
0002df 3008
0002e0 f018
0002e1 5008
0002e2 f009
0002e3 f7d1
0002e4 e0b1
0002e5 e9a3
0002e6 915d
0002e7 951a
0002e8 f7e9
0002e9 916d
0002ea 3000
0002eb f021
0002ec 9566
0002ed 9557
0002ee 950a
0002ef f7e1
0002f0 910e
0002f1 e000
0002f2 9110 0149
0002f4 9408
0002f5 1f00
0002f6 951a
0002f7 f7e1
0002f8 2350
0002f9 9359
0002fa 9543
0002fb 2f56
0002fc 916d
0002fd 953a
0002fe f7c9
0002ff 9340 0143
000301 c1bc
000302 91b1
000303 91a1
000304 30b0
000305 f479
000306 30a0
000307 f068
000308 32a0
000309 f458
00030a 9111
00030b 9101
00030c 3010
00030d f441
00030e 3001
00030f f030
000310 2f3a
000311 0f30
000312 3231
000313 f410
000314 c002
000315 c17e
000316 c17d
000317 93b0 0145
000319 93a0 0146
00031b 9300 0149
00031d 9329
00031e 0f00
00031f 9309
000320 9100 0149
000322 9543
000323 e0b2
000324 e1a3
000325 9130 0146
000327 3030
000328 f021
000329 911d
00032a 911d
00032b 953a
00032c f7e1
00032d 911d
00032e 9319
00032f 9543
000330 911d
000331 9319
000332 9543
000333 950a
000334 f7c1
000335 c188
000336 91b1
000337 91a1
000338 30b0
000339 f479
00033a 30a0
00033b f068
00033c 32a0
00033d f458
00033e 9111
00033f 9101
000340 3010
000341 f441
000342 3001
000343 f030
000344 2f3a
000345 0f30
000346 3231
000347 f410
000348 c002
000349 c14a
00034a c149
00034b 93b0 0145
00034d 93a0 0146
00034f 9300 0149
000351 9329
000352 0f00
000353 9309
000354 9100 0149
000356 9543
000357 e0b1
000358 eda3
000359 9130 0146
00035b 3030
00035c f281
00035d 911d
00035e 911d
00035f 953a
000360 f7e1
000361 911d
000362 9319
000363 9543
000364 911d
000365 9319
000366 9543
000367 950a
000368 f7c1
000369 c154
00036a 91b1
00036b 91a1
00036c 30b0
00036d f599
00036e 30a0
00036f f188
000370 30a6
000371 f578
000372 9111
000373 9101
000374 30a5
000375 f141
000376 3000
000377 f551
000378 3010
000379 f019
00037a 3f1f
00037b f009
00037c c025
00037d 9329
00037e 93b9
00037f 9543
000380 93a9
000381 9543
000382 9319
000383 9543
000384 9309
000385 9543
000386 e061
000387 2f5a
000388 3050
000389 f019
00038a 0f66
00038b 955a
00038c f7e9
00038d e0b1
00038e e5a3
00038f 3f1f
000390 f431
000391 910d
000392 2b06
000393 930e
000394 9340 0143
000396 c127
000397 9560
000398 910d
000399 2306
00039a 930e
00039b 9340 0143
00039d c120
00039e 3f1f
00039f f411
0003a0 cce7
0003a1 c0f2
0003a2 c0ff
0003a3 91b1
0003a4 91a1
0003a5 30b0
0003a6 f439
0003a7 30a0
0003a8 f028
0003a9 32a0
0003aa f418
0003ab 9111
0003ac 9101
0003ad c002
0003ae c0e5
0003af c0f2
0003b0 9329
0003b1 93b9
0003b2 9543
0003b3 93a9
0003b4 9543
0003b5 9319
0003b6 9543
0003b7 9309
0003b8 9543
0003b9 2f3a
0003ba e0b2
0003bb e1a3
0003bc c000
0003bd 3030
0003be f021
0003bf 915d
0003c0 915d
0003c1 953a
0003c2 f7e1
0003c3 931d
0003c4 930d
0003c5 c0f8
0003c6 91b1
0003c7 91a1
0003c8 30b0
0003c9 f549
0003ca 30a0
0003cb f138
0003cc 30a5
0003cd f528
0003ce 93b0 0145
0003d0 93a0 0146
0003d2 9101
0003d3 3000
0003d4 f4f9
0003d5 9300 0147
0003d7 9101
0003d8 3001
0003d9 f0d0
0003da e016
0003db 1b1a
0003dc 1701
0003dd f4b0
0003de 9300 0148
0003e0 9111
0003e1 9310 0149
0003e3 3010
0003e4 f421
0003e5 9513
0003e6 9310 0149
0003e8 c00f
0003e9 e038
0003ea 9f31
0003eb 1730
0003ec f040
0003ed 5038
0003ee 1730
0003ef f428
0003f0 9310 0149
0003f2 c005
0003f3 c0a0
0003f4 c0ad
0003f5 c0ba
0003f6 e0b1
0003f7 e5a3
0003f8 9100 0146
0003fa 9110 0148
0003fc 9170 0149
0003fe ef3f
0003ff 9131
000400 3018
000401 f550
000402 915d
000403 3000
000404 f079
000405 9556
000406 9567
000407 950a
000408 f7e1
000409 9100 0146
00040b 0f66
00040c 1f33
00040d 950a
00040e f7e1
00040f 9100 0146
000411 0f55
000412 950a
000413 f7e9
000414 9100 0146
000416 0f01
000417 e018
000418 1b10
000419 2f01
00041a 0f33
00041b 950a
00041c f7e9
00041d 2f01
00041e e060
00041f 0f55
000420 1f66
000421 950a
000422 f7e1
000423 2f01
000424 9566
000425 9537
000426 950a
000427 f7e1
000428 e0b1
000429 e5a3
00042a 933c
00042b c006
00042c e0b1
00042d e5a3
00042e 916d
00042f 2363
000430 936e
000431 5018
000432 911f
000433 9110 0149
000435 951a
000436 9310 0149
000438 931f
000439 f621
00043a 9329
00043b 9100 0145
00043d 9309
00043e 9543
00043f 9100 0146
000441 9309
000442 9543
000443 9100 0147
000445 9309
000446 9543
000447 9100 0148
000449 9309
00044a 9543
00044b 9340 0143
00044d c070
00044e 91b1
00044f 91a1
000450 30b0
000451 f4a1
000452 30a0
000453 f090
000454 32a0
000455 f480
000456 9111
000457 9101
000458 3010
000459 f469
00045a 3001
00045b f058
00045c 2f3a
00045d 0f30
00045e 3231
00045f f438
000460 9131
000461 2f50
000462 0f50
000463 1753
000464 f411
000465 c002
000466 c02d
000467 c02c
000468 93b0 0145
00046a 93a0 0146
00046c 9330 0149
00046e 9329
00046f 93b9
000470 9543
000471 93a9
000472 9543
000473 9319
000474 9543
000475 9309
000476 9543
000477 e0b2
000478 e1a3
000479 9150 0146
00047b 0f55
00047c 3050
00047d f019
00047e 916d
00047f 955a
000480 f7e9
000481 9161
000482 936d
000483 953a
000484 f7e1
000485 c038
000486 933f
000487 e830
000488 0f32
000489 9339
00048a e031
00048b 9339
00048c 9130 0143
00048e 9533
00048f 9330 0143
000491 9543
000492 913f
000493 c02a
000494 933f
000495 e830
000496 0f32
000497 9339
000498 e032
000499 9339
00049a 9130 0143
00049c 9533
00049d 9330 0143
00049f 9543
0004a0 913f
0004a1 c01c
0004a2 933f
0004a3 e830
0004a4 0f32
0004a5 9339
0004a6 e033
0004a7 9339
0004a8 9130 0143
0004aa 9533
0004ab 9330 0143
0004ad 9543
0004ae 913f
0004af c00e
0004b0 933f
0004b1 e830
0004b2 0f32
0004b3 9339
0004b4 e033
0004b5 9339
0004b6 9130 0143
0004b8 9533
0004b9 9330 0143
0004bb 9543
0004bc 913f
0004bd c000
0004be 916f
0004bf 915f
0004c0 913f
0004c1 911f
0004c2 910f
0004c3 bf0f
0004c4 910f                      	Read_Func function
                                 ;----------Начало передачи-----------;
                                 	;
                                 	;cbi PORTD,2
                                 	;ldi XH,high(DO_data)			 ; Выключаем светодиод при передаче
                                 	;ldi XL,low(DO_data)
                                 	;ld temp, X+
                                 	;sbr temp, $10
                                 	;st -X, temp
0004c5 0000                      	nop
0004c6 0000                      	nop
0004c7 0000                      	nop
0004c8 9a92                      	sbi PORTD,2
                                 
0004c9 9ac0                      	sbi	PORTB,0
                                 
0004ca e0d1                      	ldi YH, high(out_data)
0004cb e2c3                      	ldi YL, low(out_data)
                                 
0004cc 9340 0143                 	sts out_offset, lenght
0004ce ef6f                      	ldi CRCLo, 0xff
0004cf ef5f                      	ldi CRCHi, 0xff
0004d0 9100 0143                 	lds temp, out_offset
                                 	main_loop:					; Передача пакета
0004d2 9139                      	ld msg, Y+
0004d3 930f
0004d4 931f
0004d5 2f03
0004d6 e018
0004d7 2760
0004d8 9556
0004d9 9567
0004da f420
0004db ea00
0004dc 2750
0004dd e001
0004de 2760
0004df 951a
0004e0 f7b9
0004e1 911f
0004e2 910f                      	crc16 msg
0004e3 930f
0004e4 b10b
0004e5 ff05
0004e6 cffd
0004e7 b93c
0004e8 910f                      	USART_Trancieve msg
0004e9 950a                      	dec temp
0004ea f739                      	brne main_loop
0004eb 2f36                      	mov msg, CRCLo
0004ec 930f
0004ed b10b
0004ee ff05
0004ef cffd
0004f0 b93c
0004f1 910f                      	USART_Trancieve msg		; Добавление CRC в передаваемый пакет
0004f2 2f35                      	mov msg, CRCHi
0004f3 930f
0004f4 b10b
0004f5 ff05
0004f6 cffd
0004f7 b93c
0004f8 910f                      	USART_Trancieve msg
                                 	
                                 	;ldi temp, 0x07				; Включение таймера и прерывания по его переполнению 5*256 тактов
                                 	;sts TCCR2, temp
                                 	;ldi temp, 5
                                 	;sts out_flag, temp
                                 
                                 	Modbus_end:					; Сбрасываем память для приёма следующей посылки
0004f9 9897                      	cbi	PORTD,7
0004fa e000                      	ldi temp,0x00
0004fb 9300 0122                 	sts in_count, temp	
0004fd 9300 0120                 	sts in_offset, temp
0004ff e2c3                      	ldi YL, low(out_data)
000500 e0d1                          ldi YH, high(out_data)
000501 e0e0                      	ldi ZL, low(in_data)
000502 e0f1                          ldi ZH, high(in_data)
000503 ef6f                      	ldi CRCLo, 0xff
000504 ef5f                      	ldi CRCHi, 0xff
                                 
000505 efaf                      	ldi XL, low(0xffff)
000506 efbf                          ldi XH, high(0xffff)
000507 9711                      	sbiw  XH:XL,1  
000508 f7f1                      		brne	PC-1
                                 	;/*
000509 efaf                      	ldi XL, low(0xffff)
00050a efbf                          ldi XH, high(0xffff)
00050b 9711                      	sbiw  XH:XL,1
00050c efaf                      	ldi XL, low(0xffff)
00050d efbf                          ldi XH, high(0xffff)
00050e 9711                      	sbiw  XH:XL,1  
00050f f7f1                      		brne	PC-1
000510 efaf                      	ldi XL, low(0xffff)
000511 efbf                          ldi XH, high(0xffff)
000512 9711                      	sbiw  XH:XL,1
000513 f7f1                      		brne	PC-1;*/
000514 98c0                      	cbi	PORTB,0
000515 9478                      	sei
000516 cc95                      rjmp main
                                 
                                 EEWrite_func:
000517 99e1                      	SBIC	EECR,	EEWE		
000518 cffe                      	RJMP	EEWrite_func
                                 		
000519 bb2d                      	OUT 	EEDR,	r18
                                  
00051a 9ae2                      	SBI 	EECR,	EEMWE
00051b 9ae1                      	SBI 	EECR,	EEWE
00051c 9508                      RET 
                                 
                                 EERead_func:
                                 
00051d 9508                      ret
                                 
                                 ADC_Conv_Complete:					; Прерывание по окончанию преобразования
                                 	;cli
00051e 930f                      	push	r16
00051f 931f                      	push	r17
                                 	;in r16, SREG
                                 	;push r16
                                 	;lds razr1,ADCL
000520 b104                      	in		r16,	ADCL
000521 b115                      	in		r17,	ADCH
000522 9310 01d5                 	sts		temperature, r17
000524 9300 01d6                 	sts		temperature+1, r16
                                 	;sts tmperature_data
                                 
                                 Vix:
                                 	/*ldi temp, 0b01100000
                                 	out ADMUX, temp
                                 	ldi temp, 0b11011100
                                 	out ADCSRA, temp*/
000526 911f                      	pop		r17
000527 910f                      	pop		r16
                                 	;out SREG, r16
                                 	;pop r16
                                 	;sei
000528 9518                      reti
                                 
                                 USART_Init:          ; Настройка USART
000529 e000                      	ldi temp, high(UBRR_Value)
00052a bd00                      	out UBRRH, temp
00052b e100                      	ldi temp, low(UBRR_Value)
00052c b909                      	out UBRRL, temp
                                 
                                 	;ldi temp, (1<<UDRE)
                                 	;out UCSRA, temp
00052d e908                      	ldi temp, (1<<TXEN)|(1<<RXEN)|(1<<RXCIE);|(1<<TXCIE0)||(1<< UDRIE0)
00052e b90a                      	out UCSRB, temp
00052f e80e                      	ldi temp,(1<<URSEL)|(3<<UCSZ0)|(1<< USBS)|(0<<UPM1)|(0<<UPM0)
000530 bd00                      	out UCSRC, temp
                                 
000531 9508                      ret
                                 
                                 Temperature_Read:		; Запись значений с термистора в оперативную память
000532 930f                      	push r16
                                 	;sei
000533 b70f
000534 930f
000535 e000
000536 bf0f                      	PushSREG
                                 	;in r16, SREG
                                 	;push r16
000537 931f                      	push r17
000538 932f                      	push r18
000539 93af                      	push	XL
00053a 93bf                      	push	XH
00053b 93ef                      	push	ZL
00053c 93ff                      	push	ZH
                                 
                                 	;cli
                                 
00053d e807                      	ldi temp, 0b10000111
00053e b906                      	out ADCSRA, temp
                                 	;ldi XL,low(AI_data)
                                 	;ldi XH,high(AI_data)
                                 	;lds r16, temperature
                                 	;st X+, r16
                                 	;lds r16, temperature+1
                                 	;st X+, r16
00053f 9120 014d                 	lds		r18,	system_reg
                                 
000541 91b0 01d5                 	lds		XH,		temperature
000543 91a0 01d6                 	lds		XL,		temperature+1
                                 
000545 e0f0                      	ldi		ZH,		high(2*TemprAr_Values)
000546 e1ee                      	ldi		ZL,		low(2*TemprAr_Values)
                                 
000547 ef2f                      	ldi		r18,	-1
                                 	Temperature_Read_Convertion:
000548 9523                      		inc		r18
000549 3728                      		cpi		r18,	TemprAr_Size
00054a f029                      		breq	Temperature_Read_Convertion_End
00054b 9105                      		lpm		r16,	Z+
00054c 9115                      		lpm		r17,	Z+
00054d 1b0a                      		sub		r16,	XL
00054e 071b                      		cpc		r17,	XH
00054f f7c0                      		brsh	Temperature_Read_Convertion
                                 	Temperature_Read_Convertion_End:
000550 2700                      	clr		r16
000551 9300 01d3                 	sts		TemprAr_index,	r16
000553 9320 01d4                 	sts		TemprAr_index+1,	r18
                                 	
000555 9110 0215                 	lds		r17,	temperature_min
000557 9100 0216                 	lds		r16,	temperature_min+1
                                 
000559 91b0 01d3                 	lds		XH,		TemprAr_index
00055b 91a0 01d4                 	lds		XL,		TemprAr_index+1
                                 
00055d 9120 014d                 	lds		r18,	system_reg
                                 
00055f 1b0a                      	sub		r16,	XL
000560 071b                      	cpc		r17,	XH
000561 f020                      	brlo	check_over_max
                                 		;ldi temp, 6 ;Включаем таймер
                                 		;out TCCR2, temp
                                 		;ldi		r18,	0x01
000562 fd20                      		sbrc	r18,	0
000563 c002                      			rjmp	check_over_max
000564 6021                      		sbr		r18,	0b00000001
000565 d03f                      		rcall	TIMER1_Start
                                 		;rjmp	check_over_max
                                 
                                 	check_over_max:
000566 9110 0217                 	lds		r17,	temperature_max
000568 9100 0218                 	lds		r16,	temperature_max+1
                                 	;adiw	r16,	1
00056a 1b0a                      	sub		r16,	XL
00056b 071b                      	cpc		r17,	XH
00056c f430                      	brsh	Read_end;good_temp
                                 		;ldi		r18,	6 ;Включаем таймер
                                 		;out		TCCR2,	r18
                                 		;ldi		r18,	0x02
00056d fd21                      		sbrc	r18,	1
00056e c004                      			rjmp	Read_end
00056f 6022                      		sbr			r18,	0b00000010
000570 d034                      		rcall	TIMER1_Start
000571 c001                      		rjmp	Read_end
                                 
                                 	good_temp:
                                 		;ldi		r18,	6 ;Включаем таймер
                                 		;out		TCCR2,	r18
000572 e020                      		ldi		r18,	0x00
                                 	Read_end:
000573 9320 014d                 	sts		system_reg,	r18
000575 3020                      	cpi		r18,	0
000576 f429                      	brne	Read_end_1
000577 9120 0193                 		lds		r18,	DI_Data
000579 7f2c                      		cbr		r18,	0b00000011
00057a 9320 0193                 		sts		DI_Data,	r18
                                 	Read_end_1:
00057c ec0f                      	ldi		temp,		0b11001111
00057d b906                      	out		ADCSRA,		temp
00057e 91ff                      	pop		ZH
00057f 91ef                      	pop		ZL
000580 91bf                      	pop		XH
000581 91af                      	pop		XL
000582 912f                      	pop		r18
000583 911f                      	pop		r17
000584 910f
000585 bf0f                      	popSREG
000586 910f                      	pop		r16
000587 9508                      ret
                                 	/*
                                 	lds r17, temperature_min
                                 	cp r16,r17
                                 	brsh temp_over_min
                                 
                                 	lds r17, temperature_max
                                 	cp r16,r17
                                 	brlo temp_over_max
                                 		andi r18, 0b11111100
                                 		ldi temp, 5 ;Включаем таймер
                                 		out TCCR2, temp
                                 		;cbi r18,0
                                 		;cbi r18,1
                                 	rjmp temp_read_end
                                 	temp_over_min:
                                 		ori r18, 0b00000001
                                 		;andi r18, 0b11111101
                                 		;sbi r18,0
                                 		ldi temp, 5 ;Включаем таймер
                                 		out TCCR2, temp
                                 		rjmp temp_read_end
                                 	temp_over_max:
                                 		ori r18, 0b00000010
                                 		;andi r18, 0b11111110
                                 		;sbi r18,1
                                 		ldi temp, 5 ;Включаем таймер
                                 		out TCCR2,	 temp
                                 		rjmp temp_read_end
                                 	temp_read_end:
                                 	st X,r18
                                 	sei
                                 
                                 	ldi temp, 0b11001111
                                 	out ADCSRA, temp
                                 
                                 	pop r18
                                 	pop r17
                                 	PopSREG
                                 	;pop r16
                                 	;out SREG, r16
                                 	pop r16
                                 ret
                                 */
                                 
                                 
                                 ;-------------Прерывание по приёму байта-----------------;
                                 USART_RXC:
                                 	;push r16
                                 	;in r16, SREG
000588 930f                      	push r16
000589 b70f
00058a 930f
00058b e000
00058c bf0f                      	pushSreg
00058d 933f                      	push r19
00058e 934f                      	push r20
                                 
00058f 9140 0120                 	lds r20,in_offset
000591 314f                      	cpi r20, BUF_LEN-1
000592 f460                      	brsh RXC_end					; защита на слишком длинный пакет
                                 
000593 b10b                      	in r16, UCSRA
000594 ff07                      	sbrs r16, RXC
000595 cff2                      	rjmp USART_RXC
                                 
                                 	in_setbyte:
000596 b10c                      	in r16, UDR					 ;Запись в буфер приёма
000597 9301                      	st Z+,r16
000598 9543                      	inc r20 
000599 9340 0120                 	sts in_offset, r20
00059b e044                      	ldi r20,READ_TIME 
00059c 9340 0121                 	sts in_flag, r20
00059e c000                      	rjmp RXC_end
                                 
                                 	RXC_end:
00059f 914f                      	pop r20
0005a0 913f                      	pop r19
0005a1 910f
0005a2 bf0f                      	popSreg
0005a3 910f                      	pop r16
                                 	;out SREG, r16
                                 	;pop r16
0005a4 9518                      reti
                                 
                                 /*TIMER2_OVF:							; Прерывание по переполнению 2 таймера
                                 	push r20
                                 	in r20, SREG
                                 	push r20
                                 	push r21
                                 	;
                                 	lds r20, out_flag				; Загружаем доп. байт для адекватного времени моргания
                                 	and r20,r20
                                 	breq OVF2_Flag_Null
                                 	dec r20
                                 	sts out_flag, r20
                                 	rjmp OVF2_end
                                   OVF2_Flag_Null:
                                 	;ldi XH,high(DO_data)			
                                 	;ldi XL,low(DO_data)
                                 	;ld r21, X+
                                 	;cbr r21, $10					; Заносим изменение по биту, которое в main передаётся на пин к светодиоду
                                 	;st -X, r21
                                 	ldi r20, 0						; Выключаем счётчик тактов у таймера -> выключаем таймер до необходимого момента
                                 	out TCCR2, r20
                                 	ldi r20, 5						; Заносим небходимое кол-во доп. циклов в доп. байт
                                 	sts out_flag, r20
                                   OVF2_end:
                                 	pop r21
                                 	pop r20
                                 	out SREG, r20
                                 	pop r20
                                 reti*/
                                 
                                 TIMER1_Start:
0005a5 930f                      	push	temp
0005a6 e004                      	ldi		temp,	(0<<WGM13)|(0<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10)
0005a7 bd0e                      	out		TCCR1B,	temp
0005a8 b709                      	in		temp,	TIMSK
0005a9 6004                      	sbr		temp,	(1<<TOIE1)
0005aa bf09                      	out		TIMSK,	temp
0005ab 910f                      	pop		temp
0005ac 9508                      ret
                                 TIMER1_Stop:
0005ad 930f                      	push	temp
0005ae e000                      	ldi		temp,	(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(0<<CS10)
0005af bd0e                      	out		TCCR1B,	temp
0005b0 b709                      	in		temp,	TIMSK
0005b1 7f0b                      	cbr		temp,	(1<<TOIE1)
0005b2 bf09                      	out		TIMSK,	temp
0005b3 e000                      	ldi		temp,	0
0005b4 bd0d                      	out		TCNT1H,	temp
0005b5 bd0c                      	out		TCNT1L,	temp
0005b6 910f                      	pop		temp
0005b7 9508                      ret
                                 TIMER1_OVF:
0005b8 930f                      	push	r16
0005b9 b70f
0005ba 930f
0005bb e000
0005bc bf0f                      	pushSREG
0005bd 931f                      	push	r17
0005be 932f                      	push	r18
0005bf 933f                      	push	r19
0005c0 93af                      	push	XL
0005c1 93bf                      	push	XH
                                 
0005c2 91b0 01d3                 	lds		XH,		TemprAr_index
0005c4 91a0 01d4                 	lds		XL,		TemprAr_index+1
                                 
0005c6 9110 0215                 	lds		r17,	temperature_min
0005c8 9100 0216                 	lds		r16,	temperature_min+1
                                 
0005ca 9120 014d                 	lds		r18,	system_reg
0005cc 9130 0193                 	lds		r19,	DI_Data
                                 
0005ce 1b0a                      	sub		r16,	XL
0005cf 071b                      	cpc		r17,	XH
0005d0 f018                      	brlo	TIMER1_OVF_check_over_max
0005d1 ff20                      		sbrs	r18,	0
0005d2 c001                      			rjmp	TIMER1_OVF_check_over_max
0005d3 6031                      		sbr		r19,	0b00000001
                                 		;rjmp	TIMER1_OVF_check_over_max
                                 
                                 	TIMER1_OVF_check_over_max:
0005d4 9110 0217                 	lds		r17,	temperature_max
0005d6 9100 0218                 	lds		r16,	temperature_max+1
0005d8 1b0a                      	sub		r16,	XL
0005d9 071b                      	cpc		r17,	XH
0005da f428                      	brsh	TIMER1_OVF_Read_end;TIMER1_OVF_good_temp
0005db ff21                      		sbrs	r18,	1
0005dc c003                      			rjmp	TIMER1_OVF_Read_end
0005dd 6032                      		sbr		r19,	0b00000010
0005de c001                      		rjmp	TIMER1_OVF_Read_end
                                 
                                 	TIMER1_OVF_good_temp:
0005df e030                      		ldi		r19,	0x00
                                 
                                 	TIMER1_OVF_Read_end:
0005e0 9330 0193                 	sts		DI_Data,	r19
0005e2 e020                      	ldi		r18,	0x00
0005e3 9320 014d                 	sts		system_reg,	r18
0005e5 dfc7                      	rcall	TIMER1_Stop
                                 
0005e6 91bf                      	pop		XH
0005e7 91af                      	pop		XL
0005e8 913f                      	pop		r19
0005e9 912f                      	pop		r18
0005ea 911f                      	pop		r17
0005eb 910f
0005ec bf0f                      	PopSREG
0005ed 910f                      	pop		r16
0005ee 9518                      reti
                                 /*
                                 TIMER2_OVF:							; Таймер на проверку перехода температуры
                                 	;cli
                                 	;push r16
                                 	;in r16, SREG
                                 	push	r16
                                 	PushSREG
                                 	;ldi r16, 0b11000100
                                 	;out ADCSRA, temp
                                 
                                 	push	r17
                                 	push	r18
                                 	push	XL
                                 	push	XH
                                 	;ldi temp, 0				;Вычключаем таймер
                                 	;out TCCR1B, temp
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(2209): warning: '/*' in comment 
                                 	;/*
                                 	ldi r16, 0
                                 	out TCCR2, r16
                                 	;ldi XL,low(DI_data)
                                 	;ldi XH,high(DI_data)
                                 	lds		r18,	system_reg
                                 
                                 	lds		XH,		temperature
                                 	lds		XL,		temperature+1
                                 
                                 	lds		r17,	temperature_min
                                 	lds		r16,	temperature_min+1
                                 
                                 	sub		r16,	XL
                                 	cpc		r17,	XH
                                 	brsh	TIMER2_OVF_check_over_max
                                 		sbrc	r18,	0
                                 			ldi		r18,	0x01
                                 		rjmp	TIMER2_OVF_END
                                 
                                 	TIMER2_OVF_check_over_max:
                                 	lds		r17,	temperature_max
                                 	lds		r16,	temperature_max+1
                                 	;adiw	r16,	1
                                 	sub		r16,	XL
                                 	cpc		r17,	XH
                                 	brlo	TIMER2_OVF_good_temp
                                 		sbrc	r18,	1
                                 			ldi		r18,	0x02
                                 		rjmp	TIMER2_OVF_END
                                 
                                 	TIMER2_OVF_good_temp:
                                 		ldi		r18,	0x00
                                 
                                 	TIMER2_OVF_END:
                                 	sts		DI_Data,	r18
                                 	sts		system_reg,	r18
                                 	pop		XH
                                 	pop		XL
                                 	pop		r18
                                 	pop		r17
                                 	PopSREG
                                 	pop		r16
                                 reti
                                 */
                                 
                                 TIMER0_OVF:							; Прерывание по переполнению 0 таймера - проверка на конец пакета
                                 	;push r20
                                 	;in r20, SREG
0005ef 934f                      	push r20
0005f0 9140 0121                 	lds r20, in_flag				; Цикл 4 раза проходит по времени принятия одного байта, и если новых байт на приёме нет,
0005f2 2344                      	and r20,r20						; то в in_flag заносится 0,что сигнализирует о окончании пакета
0005f3 f019                      	breq OVF0_end
0005f4 954a                      	dec r20
0005f5 9340 0121                 	sts in_flag,r20
                                   OVF0_end:
0005f7 914f                      	pop r20
                                 	;out SREG, r20
                                 	;pop r20


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8A" register use summary:
x  :  31 y  :  44 z  :  44 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 370 r17: 136 r18:  56 r19: 105 r20:  52 
r21:  39 r22:  37 r23:   3 r24:  48 r25:   0 r26:  81 r27:  64 r28:   4 
r29:   4 r30:   9 r31:   9 
Registers used: 18 out of 35 (51.4%)

"ATmega8A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  12 adiw  :   0 and   :   7 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 breq  :  31 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :  21 brlt  :   0 brmi  :   0 brne  :  63 
brpl  :   0 brsh  :  20 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   6 cbr   :   2 clc   :   0 clh   :   0 
cli   :   2 cln   :   0 clr   :   2 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   1 cp    :  12 cpc   :   5 cpi   :  74 cpse  :   2 
dec   :  32 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  24 inc   :  41 ld    :  64 ldd   :   0 ldi   : 163 
lds   :  69 lpm   :   2 lsl   :   5 lsr   :   6 mov   :  27 movw  :   0 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :  29 or    :   1 
ori   :   0 out   :  76 pop   :  61 push  :  61 rcall :  14 ret   :   6 
reti  :   4 rjmp  :  90 rol   :   4 ror   :   6 sbc   :   0 sbci  :   0 
sbi   :  16 sbic  :  13 sbis  :   0 sbiw  :   4 sbr   :   5 sbrc  :   4 
sbrs  :   8 sec   :   2 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  53 std   :   0 sts   :  76 sub   :   9 subi  :   6 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 51 out of 110 (46.4%)

"ATmega8A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bf2   2796    242   3038    8192  37.1%
[.dseg] 0x000060 0x000253      0    339    339    1024  33.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
