
AVRASM ver. 2.2.8  D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm Tue Oct 25 13:46:25 2022

[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(1): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
[builtin](2): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
D:\Study\AVR_Projects\ModbusTermistorProject8\ModbusTermistor8\main.asm(1): Including file 'D:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m8Adef.inc'
                                 
                                 .include "m8Adef.inc" ;Подключение стандартной библиотеки для работы с Atmega8
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #define _M8ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8A
                                 #pragma AVRPART ADMIN PART_NAME ATmega8A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x07
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCL	= 0x04
                                 .equ	ADCH	= 0x05
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 
                                 ; TCCR0 - Timer/Counter0 Control Register
                                 .equ	CS00	= 0	; Clock Select0 bit 0
                                 .equ	CS01	= 1	; Clock Select0 bit 1
                                 .equ	CS02	= 2	; Clock Select0 bit 2
                                 
                                 ; TCNT0 - Timer Counter 0
                                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	ADHSM	= 4	; ADC High Speed Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WTDON	= 6	; Enable watchdog
                                 .equ	RSTDISBL	= 7	; Disable reset
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 ;.include "ModbusLib.inc"
                                 .list 
                                 .equ BAUD = 9600							; Скорость для UART в Бодах
                                 .equ XTAL = 8000000						; Частота в герцах
                                 .equ UBRR_value = (XTAL/(BAUD*16))-1		; Расчитывание значения для регистра UBRR
                                 
                                 .equ BUF_LEN =32							; Размер буфера для передачи данных
                                 .equ READ_TIME = 4							; Время ожидания очередного пакета данных
                                 .equ DATA_MEMORY_SIZE = 64					; Размер памяти регистров
                                 
                                 .equ POL_Hi = 0xA0							;Два байта полинома для CRC
                                 .equ POL_Lo = 0x01
                                 
                                 .def temp = r16
                                 .def sys = r17
                                 .def function= r18
                                 .def msg = r19
                                 .def lenght = r20
                                 .def CRCHi = r21					 ; Обозначение регистров
                                 .def CRCLo = r22
                                 
                                 .macro Read_Func ; Определение функции
                                 	push r16
                                 	in r16, SREG
                                 	push r16
                                 	push r17
                                 	push r19
                                 	push r21
                                 	push r22
                                 	cli
                                 	cpi @0,0x01									; Чтение Discrete Outputs
                                 	breq find_ReadCoils
                                 	cpi @0,0x02									; Чтение Discrete Inputs
                                 	breq find_Read_DI		
                                 	cpi @0, 0x03								; Чтение Analog Outputs
                                 	breq find_Read_AO_Registers					
                                 	cpi @0, 0x04								; Чтение Analog Inputs
                                 	breq find_Read_AI_Registers
                                 	cpi @0,0x05									; Запись одного Discrete Output
                                 	breq find_WriteOneCoil						
                                 	cpi @0, 0x06								; Запись одного Analog Output
                                 	breq find_Write_One_AO_Register				
                                 	cpi @0,0x0f									; Запись нексольких Discrete Outputs
                                 	breq find_WriteSeveralCoils					
                                 	cpi @0,0x10									; Запись нексольких Analog Outputs
                                 	breq find_Write_Several_AO_Registers
                                 
                                 	brne find_NoCommand_Error
                                 	find_ReadCoils:
                                 		rcall ReadCoils
                                 	find_Read_DI:
                                 		rcall Read_DI
                                 	find_Read_AO_Registers:
                                 		rcall Read_AO_Registers
                                 	find_Read_AI_Registers:
                                 		rcall Read_AI_Registers
                                 	find_WriteOneCoil:
                                 		rcall WriteOneCoil
                                 	find_WriteSeveralCoils:
                                 		rcall WriteSeveralCoils
                                 	find_Write_One_AO_Register:
                                 		rcall Write_One_AO_Register
                                 	find_Write_Several_AO_Registers:
                                 		rcall Write_Several_AO_Registers
                                 	find_NoCommand_Error:
                                 		rcall NoCommand_Error
                                 
                                 ;------------------------------------		;0x01
                                 	ReadCoils:								; ЧТЕНИЕ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВЫВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RC_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RC_wrong_addres
                                 		cpi XL, 4
                                 		brsh RC_wrong_addres
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne RC_wrong_count				
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo RC_wrong_count
                                 		ldi r17,DATA_MEMORY_SIZE-2			; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh RC_wrong_count
                                 		rjmp RC_check_ok
                                 		;
                                 		RC_wrong_addres:
                                 			rcall  WrongAddres_Error
                                 		RC_wrong_count:
                                 			rcall WrongValue_Error
                                 		;
                                 		RC_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		
                                 		st Y+, @0
                                 		; вычисление кол-ва байт на отправку
                                 		ldi r17, 0x00
                                 		ldi r19, 0xff
                                 		RC_calc_bytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RC_calc_bytes_end
                                 			subi r16,8
                                 			breq RC_calc_bytes_end
                                 			brne RC_calc_bytes
                                 		RC_calc_bytes_end:
                                 		st Y+, r17
                                 		inc lenght
                                 		mov r19, r17
                                 
                                 		lds r16,  low_buf_addres
                                 		ldi r17, 0x00
                                 		RC_calc_addresbytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RC_calc_addresbytes_end
                                 			subi r16,8
                                 			breq RC_calc_addresbytes_end
                                 			brne RC_calc_addresbytes
                                 		RC_calc_addresbytes_end:
                                 		
                                 		ldi XH,high(DO_data)
                                 		ldi XL,low(DO_data)
                                 		RC_addres_shift:
                                 			ld r21, X+
                                 			dec r17
                                 		brne RC_addres_shift
                                 		ld r22, X+					
                                 		cpi r16, 0x00
                                 		breq RC_shift_end
                                 		RC_shift:							; Выполняем свдиг до необходимого адреса в регистре
                                 			lsr r22
                                 			ror r21
                                 			dec r16
                                 		brne RC_shift
                                 		RC_shift_end:
                                 		ld r16,-X
                                 		ldi r16, 0x00
                                 		lds r17, buf_bytes_count			; Дополняем пакет данными
                                 		RC_bytes_mask:
                                 			sec
                                 			rol r16
                                 			dec r17
                                 		brne RC_bytes_mask
                                 		RC_Read_DI:
                                 			and r21, r16
                                 			st Y+, r21
                                 			inc lenght
                                 			mov r21, r22
                                 			ld r22, X+
                                 			dec r19
                                 		brne RC_Read_DI
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 ;------------------------------------		; 0x02
                                 	Read_DI:								; ЧТЕНИЕ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RDI_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RDI_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE
                                 		brsh RDI_wrong_addres
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne RDI_wrong_count				
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo RDI_wrong_count
                                 		ldi r17,DATA_MEMORY_SIZE-2			; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh RDI_wrong_count
                                 		rjmp RDI_check_ok
                                 		;
                                 		RDI_wrong_addres:
                                 			rcall  WrongAddres_Error
                                 		RDI_wrong_count:
                                 			rcall WrongValue_Error
                                 		;
                                 		RDI_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		
                                 		st Y+, @0
                                 		; вычисление кол-ва байт на отправку
                                 		ldi r17, 0x00
                                 		ldi r19, 0xff
                                 		RDI_calc_bytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RDI_calc_bytes_end
                                 			subi r16,8
                                 			breq RDI_calc_bytes_end
                                 			brne RDI_calc_bytes
                                 		RDI_calc_bytes_end:
                                 		st Y+, r17
                                 		inc lenght
                                 		mov r19, r17
                                 
                                 		lds r16,  low_buf_addres
                                 		ldi r17, 0x00
                                 		RDI_calc_addresbytes:
                                 			inc r17
                                 			cpi r16,8
                                 			brlo RDI_calc_addresbytes_end
                                 			subi r16,8
                                 			breq RDI_calc_addresbytes_end
                                 			brne RDI_calc_addresbytes
                                 		RDI_calc_addresbytes_end:
                                 		
                                 		ldi XH,high(DI_data)
                                 		ldi XL,low(DI_data)
                                 		RDI_addres_shift:
                                 			ld r21, X+
                                 			dec r17
                                 		brne RDI_addres_shift
                                 		ld r22, X+					
                                 		cpi r16, 0x00
                                 		breq RDI_shift_end
                                 		RDI_shift:							; Выполняем свдиг до необходимого адреса в регистре
                                 			lsr r22
                                 			ror r21
                                 			dec r16
                                 		brne RDI_shift
                                 		RDI_shift_end:
                                 		ld r16,-X
                                 		ldi r16, 0x00
                                 		lds r17, buf_bytes_count			; Дополняем пакет данными
                                 		RDI_bytes_mask:
                                 			sec
                                 			rol r16
                                 			dec r17
                                 		brne RDI_bytes_mask
                                 		RDI_Read_DI:
                                 			and r21, r16
                                 			st Y+, r21
                                 			inc lenght
                                 			mov r21, r22
                                 			ld r22, X+
                                 			dec r19
                                 		brne RDI_Read_DI
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 ;-------------------------------------------; 0x03
                                 	Read_AO_Registers:						; ЧТЕНИЕ АНАЛОГОВЫХ ВЫВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RAO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RAO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh RAO_wrong_addres
                                 		;RAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne RAO_wrong_count
                                 		cpi r16, 0x01
                                 		brlo RAO_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh RAO_wrong_count
                                 		rjmp RAO_check_ok
                                 		;
                                 		RAO_wrong_addres:					; Переход в ошибки
                                 			rcall WrongAddres_Error
                                 		RAO_wrong_count:
                                 			rcall WrongAddres_Error
                                 		;
                                 		RAO_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		st Y+, @0
                                 		add r16, r16
                                 		st Y+, r16
                                 		lds r16,buf_bytes_count
                                 		inc lenght
                                 		ldi XH,high(AO_data)
                                 		ldi XL,low(AO_data)
                                 		lds r19, low_buf_addres
                                 		;sts temp_sram, r19
                                 		cpi r19,0x00
                                 		breq RAO_read_AO
                                 		RAO_addres_shift:
                                 			ld r17, X+
                                 			ld r17, X+
                                 			dec r19
                                 		brne RAO_addres_shift
                                 		RAO_read_AO:
                                 			ld r17, X+
                                 			;sts temp_sram, r17
                                 			st Y+, r17
                                 			inc lenght
                                 			ld r17, X+
                                 			st Y+, r17
                                 			inc lenght
                                 			dec r16
                                 		brne RAO_read_AO
                                 		rjmp Read_Func_end
                                 
                                 ;-------------------------------------------; 0x04
                                 	Read_AI_Registers:						; ЧТЕНИЕ АНАЛОГОВЫХ ВВОДОВ
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne RAI_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo RAI_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh RAI_wrong_addres
                                 		;RAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne RAI_wrong_count
                                 		cpi r16, 0x01
                                 		brlo RAI_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh RAI_wrong_count
                                 		rjmp RAI_check_ok
                                 		;
                                 		RAI_wrong_addres:					; Переход в ошибки
                                 			rcall WrongAddres_Error
                                 		RAI_wrong_count:
                                 			rcall WrongAddres_Error
                                 		;
                                 		RAI_check_ok:
                                 		sts high_buf_addres, XH
                                 		sts low_buf_addres, XL
                                 		sts buf_bytes_count, r16
                                 		st Y+, @0
                                 		add r16, r16
                                 		st Y+, r16
                                 		lds r16,buf_bytes_count
                                 		inc lenght
                                 		ldi XH,high(AI_data)
                                 		ldi XL,low(AI_data)
                                 		lds r19, low_buf_addres
                                 		;sts temp_sram, r19
                                 		cpi r19,0x00
                                 		breq RAO_read_AO
                                 		RAI_addres_shift:
                                 			ld r17, X+
                                 			ld r17, X+
                                 			dec r19
                                 		brne RAI_addres_shift
                                 		RAI_read_AO:
                                 			ld r17, X+
                                 			;sts temp_sram, r17
                                 			st Y+, r17
                                 			inc lenght
                                 			ld r17, X+
                                 			st Y+, r17
                                 			inc lenght
                                 			dec r16
                                 		brne RAI_read_AO
                                 		rjmp Read_Func_end
                                 
                                 ;------------------------------------------ ;0x05
                                 	WriteOneCoil:							; ЗАПИСЬ ЗНАЧЕНИЯ В ОДИН ДИСКРЕТНЫЙ ВЫВОД
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WOC_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo WOC_wrong_addres
                                 		cpi XL, 6
                                 		brsh WOC_wrong_addres
                                 		;WOC_Value_check:
                                 		ld r17, Z+							; Проверка вводимого значения
                                 		ld r16, Z+
                                 		cpi XL,5
                                 		breq WOC_reset_request
                                 		cpi r16,0x00
                                 		brne WOC_wrong_count
                                 		cpi r17,0x00
                                 		breq WOC_count_ok
                                 		cpi r17,0xff
                                 		breq WOC_count_ok
                                 		rjmp WOC_wrong_count
                                 			
                                 		WOC_count_ok:
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			ldi r22,0x01
                                 			mov r21, XL
                                 			cpi r21, 0x00
                                 			breq WOC_shift_end
                                 			WOC_shift:
                                 				lsl r22
                                 				dec r21
                                 			brne WOC_shift
                                 			WOC_shift_end:
                                 			
                                 			ldi XH,high(DO_data)
                                 			ldi XL,low(DO_data)
                                 
                                 			cpi r17, 0xff
                                 			brne clr_WOC
                                 				ld r16, X+
                                 				or r16, r22
                                 				st -X,r16
                                 				sts out_offset, lenght
                                 				rjmp Read_Func_end
                                 			clr_WOC:
                                 				com r22
                                 				ld r16, X+ ;PORTC
                                 				and r16, r22
                                 				st -X,r16	;PORTC
                                 				sts out_offset, lenght
                                 				rjmp Read_Func_end
                                 			WOC_reset_request:
                                 				cpi r17, 0xff
                                 				brne WOC_wrong_count
                                 				rjmp Reset
                                 		WOC_wrong_addres:
                                 			rcall  WrongAddres_Error
                                 		WOC_wrong_count:
                                 			rcall WrongValue_Error
                                 ;-------------------------------------------;0x06
                                 	Write_One_AO_Register:					; ЗАПИСЬ ОДНОГО АНАЛОГОВОГО ВЫВОДА
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne W1AO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo W1AO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh W1AO_wrong_addres
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		rjmp W1AO_check_ok
                                 		;
                                 		W1AO_wrong_addres:
                                 			rcall WrongAddres_Error
                                 		W1AO_Wrong_Value:
                                 			rcall WrongValue_Error
                                 		;
                                 		W1AO_check_ok:
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			mov r19, XL
                                 			ldi XH,high(AO_data)
                                 			ldi XL,low(AO_data)
                                 			cpi r19,0x00
                                 			breq W1AO_writeEEPROM_DevAdd
                                 			cpi r19,0x01
                                 			breq W1AO_writeEEPROM_TemMin
                                 			cpi r19,0x02
                                 			breq W1AO_writeEEPROM_TemMax
                                 			rjmp W1AO_input_data
                                 
                                 			;Ввод в EEPROM
                                 			;Ввод нового адреса устройства
                                 			W1AO_writeEEPROM_DevAdd:
                                 				cpi r16, 0x00
                                 					breq W1AO_Wrong_Value
                                 				cpi r16, 0xF8
                                 					brsh W1AO_Wrong_Value
                                 				sts eeprom_data, r16
                                 				ldi r21,0x00
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts devise_address, r16
                                 				;EEWrite r16
                                 				rjmp W1AO_input_data
                                 			;Ввод нижней границы температуры
                                 			W1AO_writeEEPROM_TemMin:
                                 				lds r21,temperature_max
                                 				cp r16, r21
                                 					brlo W1AO_Wrong_Value
                                 				;EEWrite r16
                                 				sts eeprom_data, r16
                                 				ldi r21,0x01
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts temperature_min, r16
                                 				rjmp W1AO_input_data
                                 			;Ввод верхней границы температуры
                                 			W1AO_writeEEPROM_TemMax:
                                 				lds r21,temperature_min
                                 				cp r16, r21
                                 					brsh W1AO_Wrong_Value
                                 				;EEWrite r16
                                 				sts eeprom_data, r16
                                 				ldi r21,0x02
                                 				sts eeprom_address, r21
                                 				ldi r21,0x01
                                 				sts eeprom_flag, r21
                                 				sts temperature_max, r16
                                 				rjmp W1AO_input_data
                                 
                                 			W1AO_input_data:
                                 			cpi r19,0x00
                                 				breq W1AO_write_AO
                                 			W1AO_addres_shift:
                                 				ld r21, X+
                                 				ld r21, X+
                                 				dec r19
                                 			brne W1AO_addres_shift
                                 			W1AO_write_AO:
                                 				st X+, r17
                                 				st X+, r16
                                 			rjmp Read_Func_end
                                 
                                 ;-------------------------------------------;0x0F
                                 	WriteSeveralCoils:						; ЗАПИСЬ НЕСКОЛЬКИХ ДИСКРЕТНЫХ ВЫВОДОВ	
                                 
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WSC_Wrong_Addres
                                 		cpi XL, 0x00
                                 		brlo WSC_Wrong_Addres
                                 		cpi XL, 5
                                 		brsh WSC_Wrong_Addres
                                 		
                                 		sts high_buf_addres, XH 
                                 		sts low_buf_addres, XL 
                                 
                                 		ld r16, Z+			
                                 		cpi r16,0x00						; Проверка количества регистров
                                 		brne WSC_Wrong_Count
                                 		sts high_buf_registers_count, r16
                                 		ld r16, Z+
                                 		cpi r16,0x01
                                 		brlo WSC_Wrong_Count
                                 		ldi r17,6							; Проверка чтения дискретных пинов не больше имеющихся
                                 		sub r17, XL	
                                 		cp r16, r17
                                 		brsh WSC_Wrong_Count
                                 		sts low_buf_registers_count, r16
                                 		ld r17,Z+
                                 		sts buf_bytes_count,r17				; Проверка кол-ва следующих байтов
                                 		cpi r17, 0							; если кол-во равно 0, то присвоить 1
                                 		brne WSC_CheckBytesCount
                                 			inc r17
                                 			sts buf_bytes_count,r17
                                 			rjmp WSC_CheckEnd
                                 		WSC_CheckBytesCount:
                                 			
                                 			ldi r19, 8
                                 			mul r19, r17
                                 
                                 			cp r19, r16
                                 			brlo WSC_Wrong_Value
                                 			subi r19,8
                                 			cp r19, r16
                                 			brsh WSC_Wrong_Value
                                 			sts buf_bytes_count,r17
                                 			rjmp WSC_CheckEnd
                                 		;
                                 		WSC_Wrong_Addres:					; Переход при ошибке
                                 			rcall WrongAddres_Error
                                 		WSC_Wrong_Count:
                                 			rcall WrongValue_Error
                                 		WSC_Wrong_Value:
                                 			rcall WrongCount_Error
                                 		;
                                 		ldi XH,high(DO_data)
                                 		ldi XL,low(DO_data)
                                 		WSC_CheckEnd:						; Окончание проверки
                                 			lds r16, low_buf_addres			; Адрес первого DO
                                 			lds r17, low_buf_registers_count; Количество записываемых DO
                                 			lds r23, buf_bytes_count
                                 		WSC_setbytes_loop:					; Цикл прохода по введённым байтам
                                 			ldi r19,0xff
                                 			ld r19,Z+
                                 			cpi r17, 8
                                 			brsh WCS_shift_MT8		
                                 			WSC_OneShift:
                                 				ld r21, X+ ; in r21, PORTC
                                 				cpi r16,0
                                 				breq WSC_AddShift_end
                                 			WSC_AddShift:
                                 				lsr r21
                                 				ror r22
                                 				dec r16
                                 			brne WSC_AddShift
                                 				lds r16, low_buf_addres
                                 			WSC_AddShift_sec:
                                 				lsl r22
                                 				rol r19
                                 				dec r16
                                 			brne WSC_AddShift_sec
                                 				lds r16, low_buf_addres
                                 			WSC_AddShift_third:
                                 				lsl r21
                                 				dec r16
                                 			brne WSC_AddShift_third
                                 			WSC_AddShift_end:
                                 				lds r16, low_buf_addres
                                 				add r16,r17
                                 				ldi r17, 8
                                 				sub r17, r16
                                 				mov r16,r17
                                 			WSC_RightByteShift:
                                 				lsl r19
                                 				dec r16
                                 			brne WSC_RightByteShift
                                 				mov r16,r17
                                 				ldi r22,0x00
                                 			WSC_RightByteShift_sec:
                                 				lsl r21
                                 				rol r22
                                 				dec r16
                                 			brne WSC_RightByteShift_sec
                                 				mov r16,r17
                                 			WSC_RightByteShift_third:
                                 				lsr r22
                                 				ror r19
                                 				dec r16
                                 			brne WSC_RightByteShift_third
                                 				ldi XH,high(DO_data)
                                 				ldi XL,low(DO_data)
                                 				st X, r19	;out PORTC, r19	
                                 				rjmp WCS_shift_end
                                 			WCS_shift_MT8:
                                 				ldi XH,high(DO_data)
                                 				ldi XL,low(DO_data)
                                 				ld r22, X+	; in r22,PORTC
                                 				and r22,r19
                                 				st -X, r22	; out PORTC,r22
                                 				subi r17,8				
                                 			WCS_shift_end:
                                 			pop r17
                                 			lds r17, buf_bytes_count
                                 			dec r17
                                 			sts buf_bytes_count, r17
                                 			push r17
                                 		brne WSC_setbytes_loop
                                 		st Y+, function
                                 		lds r16, high_buf_addres
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, low_buf_addres
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, high_buf_registers_count
                                 		st Y+, r16
                                 		inc lenght
                                 		lds r16, low_buf_registers_count
                                 		st Y+, r16
                                 		inc lenght
                                 		sts out_offset, lenght
                                 		rjmp Read_Func_end
                                 
                                 
                                 ;-------------------------------------------; 0x10 ЗАПИСЬ НЕСКОЛЬКИХ АНАЛОГОВЫХ ВЫВОДОВ
                                 	Write_Several_AO_Registers:
                                 		ld XH, Z+
                                 		ld XL, Z+
                                 		cpi XH, 0x00						; Проверка адреса
                                 		brne WSAO_wrong_addres
                                 		cpi XL, 0x00
                                 		brlo WSAO_wrong_addres
                                 		cpi XL, DATA_MEMORY_SIZE/2
                                 		brsh WSAO_wrong_addres
                                 		;WSAO_Count_check
                                 		ld r17, Z+
                                 		ld r16, Z+
                                 		cpi r17, 0x00
                                 		brne WSAO_wrong_count
                                 		cpi r16, 0x01
                                 		brlo WSAO_wrong_count
                                 		mov r19, XL
                                 		add r19, r16
                                 		cpi r19, DATA_MEMORY_SIZE/2+1
                                 		brsh WSAO_wrong_count
                                 		ld r19, Z+
                                 		mov r21, r16
                                 		add r21, r16
                                 		cp r21, r19
                                 		brne WSAO_wrong_count
                                 		rjmp WSAO_check_ok
                                 		;
                                 		WSAO_wrong_addres:					; При ошибке передходим в exception
                                 			rcall WrongAddres_Error
                                 		WSAO_wrong_count:
                                 			rcall WrongAddres_Error
                                 		;
                                 		WSAO_check_ok:
                                 			sts high_buf_addres, XH 
                                 			sts low_buf_addres, XL 
                                 			sts buf_bytes_count, r19
                                 			st Y+, function
                                 			st Y+, XH
                                 			inc lenght
                                 			st Y+, XL
                                 			inc lenght
                                 			st Y+, r17
                                 			inc lenght
                                 			st Y+, r16
                                 			inc lenght
                                 			ldi XH,high(AO_data)
                                 			ldi XL,low(AO_data)
                                 			lds r21, low_buf_addres
                                 			add r21, r21
                                 			cpi r21, 0x00
                                 			breq WSAO_write_AO_bytes
                                 			WSAO_addres_shift:
                                 				ld r22,X+
                                 				dec r21
                                 				brne WSAO_addres_shift
                                 			WSAO_write_AO_bytes:
                                 				ld r22, Z+
                                 				st X+, r22
                                 				dec r19
                                 			brne WSAO_write_AO_bytes
                                 			
                                 			rjmp Read_Func_end
                                 
                                 ;--------------- ВЫВОД ОШИБОК------------------------;
                                 	NoCommand_Error:						 
                                 		Func_Error @0,1
                                 		rjmp Read_Func_end
                                 	WrongAddres_Error:
                                 		Func_Error @0,2
                                 		rjmp Read_Func_end
                                 	WrongValue_Error:
                                 		Func_Error @0,3
                                 		rjmp Read_Func_end
                                 	WrongCount_Error:
                                 		Func_Error @0,3
                                 		rjmp Read_Func_end
                                   Read_Func_end:
                                 	pop r22
                                 	pop r21
                                 	pop r19
                                 	pop r17
                                 	pop r16
                                 	out SREG, r16
                                 	pop r16
                                 	sei
                                 .endm
                                 
                                 
                                 .macro Func_Error		; @0 - код изначальной функции, @1 - excepction код
                                 	push r19
                                 		ldi r19, 0x80
                                 		add r19, @0
                                 		st Y+, r19
                                 		ldi r19, @1
                                 		st Y+, r19
                                 		lds r19, out_offset
                                 		inc r19
                                 		sts out_offset, r19
                                 		inc lenght
                                 	pop r19
                                 .endm
                                 
                                 .macro crc16  ; Вычисление СRC по каждому байту (передаётся регистр)
                                 	push r16
                                 	push r17
                                 
                                 	mov r16, @0
                                 	ldi r17, 8
                                 	eor CRCLo, r16
                                 	crc_loop:
                                 	
                                 	LSR CRCHi
                                 	ROR CRCLo
                                 	brcc zer1
                                 
                                 	ldi r16, POL_Hi
                                 	eor CRCHi, r16
                                 	ldi r16, POL_Lo
                                 	eor CRCLo, r16
                                 
                                 	zer1:
                                 	dec r17
                                 	brne crc_loop
                                 
                                 	pop r17
                                 	pop r16
                                 
                                 .endm
                                 
                                 .macro USART_Trancieve // Передача одного байта
                                 push r16
                                 trans_loop:
                                 	in r16, UCSRA
                                 	sbrs r16, UDRE					; Проверяем, не занят ли буфер передачи USART
                                 	rjmp trans_loop
                                 	out UDR,@0						; Передаём байт+
                                 pop r16
                                 .endm
                                 
                                 .macro EERead				; @0 - Address byte
                                 	EERead_loop:
                                 	sbic 	EECR,EEWE		; Ждем пока будет завершена прошлая запись.
                                 	rjmp	EERead_loop		; также крутимся в цикле.
                                 	cli
                                 	push r24
                                 	ldi		r24, 0x00
                                 	out		EEARH, r24		; загружаем адрес нужной ячейки
                                 	ldi		r24, @0
                                 	out 	EEARL, r24
                                 	;out  	EEARH, low(@0) 		; его старшие и младшие байты
                                 	sbi 	EECR,EERE 		; Выставляем бит чтения
                                 	in 	r16, EEDR 		; Забираем из регистра данных результат
                                 	sts eeprom_data,r16
                                 	pop r16
                                 	sei
                                 .endm
                                 
                                 .macro EEWrite				; @0 - Address byte, @1 - Data
                                 	EEWrite_loop:
                                 	sbic	EECR,EERE		; Ждем готовности памяти к записи. Крутимся в цикле
                                 	rjmp	EEWrite_loop 		; до тех пор пока не очистится флаг EEWE
                                  
                                 	cli				; Затем запрещаем прерывания.
                                 	push r24
                                 	;push r17
                                 	;push r21
                                 	mov		r24, @0
                                 	out 	EEARL, r24 		; Загружаем адрес нужной ячейки
                                 	ldi		r24, 0x00
                                 	out		EEARH, r24
                                 	;ldi		r16, high(@0)
                                 	;out 	EEARH, r16  		; старший и младший байт адреса
                                 	out 	EEDR, @1 		; и сами данные, которые нам нужно загрузить
                                 
                                 	sbi 	EECR,EEMWE		; взводим предохранитель
                                 	sbi 	EECR,EEWE		; записываем байт
                                 	
                                 	;pop r21
                                 	;pop r17
                                 	pop r24
                                 	sei 				    ; разрешаем прерывания
                                 .endm 				        ; возврат из процедуры
                                  
                                  
                                 ; Блок Данных
                                 .dseg 
                                 .org $100
                                 ;temp_sram: .BYTE 1
                                 ;temperature: .BYTE 1
                                 
000100                           in_data: .BYTE BUF_LEN				; Буфер принятых данных
000120                           in_offset: .BYTE 1					; Смещение в буфере при принятии
000121                           in_flag: .BYTE 1					; флаг для чтения пакета(0 при конце пакета)
000122                           in_count: .BYTE 1					; число принятых байтов
                                 
000123                           out_data: .BYTE BUF_LEN				; Буфер данных для отправки
000143                           out_offset: .BYTE 1					; Смещение в буфере при передаче
000144                           out_flag: .BYTE 1					; Флаг по окончании передачи пакета
000145                           high_buf_addres: .BYTE 1			; Буфер для первого адреса
000146                           low_buf_addres: .BYTE 1
000147                           high_buf_registers_count: .BYTE 1	; Буфер для хранения количества регистров
000148                           low_buf_registers_count: .BYTE 1
000149                           buf_bytes_count: .BYTE 1			; Буфер для хранения количества передаваемых байтов
                                 
00014a                           eeprom_data: .BYTE 1
00014b                           eeprom_address: .BYTE 1
00014c                           eeprom_flag: .BYTE 1
00014d                           devise_address: .BYTE 1				; Адрес устройства
                                 
00014e                           temperature_min: .BYTE 1
00014f                           temperature_max: .BYTE 1
000150                           temperature: .BYTE 1
000151                           temperature_data: .BYTE 2			; Дынные с датчика температуры
                                 
000153                           DO_data: .BYTE DATA_MEMORY_SIZE					; Discrete Output Coils (чтение/запись)
000193                           DI_data: .BYTE DATA_MEMORY_SIZE					; Discrete Input Coils (чтение)
0001d3                           AI_data: .BYTE DATA_MEMORY_SIZE					; Analog Input Coils (чтение)
000213                           AO_data: .BYTE DATA_MEMORY_SIZE					; Analog Output Coils (чтение/запись)
                                 
                                 ; Блок кода
                                 .cseg
                                 		 .org $000        	; (RESET) 
000000 c00e                               RJMP Reset
                                 		 .org $004
000004 c45f                      		 RJMP TIMER2_OVF
                                 		;.org $008
                                 		 ;RJMP TIMER1_OVF
                                 		 .org $009
000009 c488                      		 RJMP TIMER0_OVF
                                 		 .org $00b
00000b c43d                      		 rjmp USART_RXC
                                 		 .org $00e
00000e c3f6                      		 rjmp ADC_Conv_Complete
                                 
                                 Reset:
                                 
00000f e004                      ldi temp, High(Ramend)
000010 bf0e                      out sph, temp
000011 e50f                      ldi temp, Low(Ramend)
000012 bf0d                      out spl,temp
                                 
000013 ef5f                      ldi CRCHi,0xFF ; CrcIn
000014 ef6f                      ldi CRCLo,0xFF
                                 
000015 e0f0                      ldi r31,0x00
000016 e6e0                      ldi r30,0x60
000017 e002                      ldi r16,0x02
000018 e030                      ldi r19,0x00
                                 mem_cl:
000019 ef1f                        ldi r17,0xff
                                   mem_cl2:					; ОЧИЩАЕМ ПАМЯТЬ ПЕРЕД РАБОТОЙ 2*256 = 512 байт	st Z+,r19
00001a 9331                      	st Z+, r19
00001b 951a                      	dec r17
00001c f7e9                      	brne mem_cl2
00001d 950a                        dec r16
00001e f7d1                      brne mem_cl
                                 
                                 
                                 ; Настройка АЦП
00001f e600                      ldi		temp,	0b01100000
000020 b907                      out		ADMUX,	temp
000021 ec0f                      ldi temp, 0b11001111
000022 b906                      out ADCSRA, temp
                                 ;TIMER0 Settings
                                 ;ldi temp, 01			;Задаём TIMSK для всех таймеров
000023 e401                      ldi temp,(1<<TOIE2)|(1<<TOIE0);|(1<<TOIE1)
000024 bf09                      out TIMSK, temp
000025 e005                      ldi temp, 5
000026 bf03                      out TCCR0,temp
                                 
                                 ;TIMER1 Settings
                                 ;ldi temp, 0				; Выключаем подсчёт тактов, а включим только при необходимости
                                 ;out TCCR1B, temp
                                 
                                 ;TIMER2 Settings
000027 e000                      ldi temp, 0				; Выключаем подсчёт тактов, а включим только при необходимости
000028 bd05                      out TCCR2, temp
                                 
000029 e308                      ldi temp, 0b00111000
00002a bb04                      out ddrc, temp
                                 ;ldi temp, 0b0010000
                                 ;out ddrd, temp
00002b e0b1                      ldi XH,high(DO_data)
00002c e5a3                      ldi XL,low(DO_data)
00002d 930d                      st X+, temp
00002e bb05                      out PORTC, temp
                                 
00002f e00e                      ldi temp, 0b00001110
000030 bb01                      out ddrd, temp
000031 2f30                      mov msg, temp
                                 
                                 
000032 d3dc                      rcall USART_Init
                                 ;ldi temp, 0x01
                                 ;sts devise_address, temp
                                 
                                 ; Чтение адреса
000033 e0b2                      ldi XH,high(AO_data)
000034 e1a3                      ldi XL,low(AO_data)
000035 99e1
000036 cffe
000037 94f8
000038 938f
000039 e080
00003a bb8f
00003b e080
00003c bb8e
00003d 9ae0
00003e b30d
00003f 9300 014a
000041 910f
000042 9478                      EERead 0x00
000043 9100 014a                 lds temp, eeprom_data
000045 3f0f                      cpi temp, 0xff
000046 f479                      brne AdrRead_end
000047 e001                      	ldi temp, 0x01
000048 e010                      	ldi sys, 0x00
000049 99e0
00004a cffe
00004b 94f8
00004c 938f
00004d 2f81
00004e bb8e
00004f e080
000050 bb8f
000051 bb0d
000052 9ae2
000053 9ae1
000054 918f
000055 9478                      	EEWrite sys, temp
                                 AdrRead_end:
000056 e010                      ldi	r17,0x00
000057 931d                      st	X+,	r17
000058 930d                      st	X+,	temp
000059 9300 014d                 sts devise_address, temp
                                 
                                 
                                 ;Чтение минимального порога температуры
00005b 99e1
00005c cffe
00005d 94f8
00005e 938f
00005f e080
000060 bb8f
000061 e081
000062 bb8e
000063 9ae0
000064 b30d
000065 9300 014a
000067 910f
000068 9478                      EERead 0x01
000069 9100 014a                 lds temp, eeprom_data
00006b 3f0f                      cpi temp, 0xff
00006c f479                      brne TemMinRead_end
00006d ee03                      	ldi temp, 0b11100011 ;Нижнее ограничение диапазона температуры  +30
00006e e011                      	ldi sys, 0x01
00006f 99e0
000070 cffe
000071 94f8
000072 938f
000073 2f81
000074 bb8e
000075 e080
000076 bb8f
000077 bb0d
000078 9ae2
000079 9ae1
00007a 918f
00007b 9478                      	EEWrite sys, temp
                                 TemMinRead_end:
00007c e010                      ldi	r17,0x00
00007d 931d                      st	X+,	r17
00007e 930d                      st	X+,	temp
00007f 9300 014e                 sts temperature_min, temp
                                 
                                 ;Чтение максимального порога температуры
000081 99e1
000082 cffe
000083 94f8
000084 938f
000085 e080
000086 bb8f
000087 e082
000088 bb8e
000089 9ae0
00008a b30d
00008b 9300 014a
00008d 910f
00008e 9478                      EERead 0x02
00008f 9100 014a                 lds temp, eeprom_data
000091 3f0f                      cpi temp, 0xff
000092 f479                      brne TemMaxRead_end
000093 eb06                      	ldi temp, 0b10110110 ; Верхнее ограничение диапазона температуры  +60
000094 e012                      	ldi sys, 0x02
000095 99e0
000096 cffe
000097 94f8
000098 938f
000099 2f81
00009a bb8e
00009b e080
00009c bb8f
00009d bb0d
00009e 9ae2
00009f 9ae1
0000a0 918f
0000a1 9478                      	EEWrite sys, temp
                                 TemMaxRead_end:
0000a2 e010                      ldi	r17,0x00
0000a3 931d                      st	X+,	r17
0000a4 930d                      st	X+,	temp
0000a5 9300 014f                 sts temperature_max, temp
                                 
                                 /*
                                 ; Установление min и max для температуры
                                 ldi temp, 0b11100011 ;Нижнее ограничение диапазона температуры  +30
                                 sts temperature_min, temp
                                 ldi temp, 0b10110110 ; Верхнее ограничение диапазона температуры  +60
                                 sts temperature_max, temp*/
                                 
0000a7 e000                      ldi temp, 0x00
0000a8 9300 0120                 sts in_offset, temp
0000aa 9300 0122                 sts in_count, temp
0000ac e0e0                      ldi ZL, low(in_data)
0000ad e0f1                      ldi ZH, high(in_data)
                                 
0000ae e2c3                      ldi YL, low(out_data)
0000af e0d1                      ldi YH, high(out_data)
                                 
0000b0 9478                      sei
                                 /*
                                 ldi ZL,low(in_data)	
                                 ldi ZH,high(in_data)
                                 ldi temp, 0x01
                                 st Z+,temp
                                 ldi temp, 0x06
                                 st Z+,temp
                                 ldi temp, 0x00
                                 st Z+,temp
                                 ldi temp, 0x01
                                 st Z+,temp
                                 ldi temp, 0x00
                                 st Z+,temp
                                 ldi temp, 0x10
                                 st Z+,temp
                                 ldi temp, 6
                                 sts in_offset, temp
                                 ;*/
                                 ;----------------------------- MAIN ---------------------------;
                                 main:
0000b1 ec0f                      	ldi temp, 0b11001111
0000b2 b906                      	out ADCSRA, temp
0000b3 e5a3                      	ldi XL,low(DO_data)			; Чтение значений из пямяти дискретных выводов для индикации
0000b4 e0b1                      	ldi XH,high(DO_data)
0000b5 910d                      	ld temp, X+
0000b6 9aad                      	sbi PORTC,5
0000b7 bb05                      	out PORTC,temp
0000b8 9892                      	cbi PORTD,2
                                 	;ld sys, X+
                                 	;ldi XL,low(DI_data)			; Опрос дискретных входов и занесение значений в память DI
                                 	;ldi XH,high(DI_data)
                                 	;in temp, PORTB
                                 	;st X+,temp
                                 	
                                 	;ldi temp, 0x20
                                 	;sts temperature, temp
                                 	;;;;;;;;;;
                                 
0000b9 d35f                      	rcall Temperature_Read
                                 
                                 	;;;;;;;;;;
0000ba 9100 014c                 	lds temp, eeprom_flag
0000bc 3001                      	cpi temp, 0x01
0000bd f0c0                      	brlo EEPROM_write_end
0000be 9100 014a                 		lds temp, eeprom_data
0000c0 9110 014b                 		lds sys, eeprom_address
0000c2 99e0
0000c3 cffe
0000c4 94f8
0000c5 938f
0000c6 2f81
0000c7 bb8e
0000c8 e080
0000c9 bb8f
0000ca bb0d
0000cb 9ae2
0000cc 9ae1
0000cd 918f
0000ce 9478                      		EEWrite sys, temp
0000cf 2700                      		clr temp
0000d0 9300 014a                 		sts eeprom_data, temp
0000d2 9300 014b                 		sts eeprom_address, temp
0000d4 9300 014c                 		sts eeprom_flag, temp
                                 	EEPROM_write_end:
0000d6 9100 0120                 	lds temp, in_offset				; ждать появления первого байта
0000d8 2300                      	and temp,temp
0000d9 f019                      	breq Main_end
                                 	; Переход на приём/передачу по modbus
                                 	;ldi temp, 0b00001111			; выключаем АЦП
0000da e00f                      	ldi temp, 0b00001111
0000db b906                      	out ADCSRA, temp
0000dc c001                      	rjmp MODBUS_Communication
                                 	Main_end:
0000dd cfd3                      rjmp main
                                 
                                 ;--------------------------- КОНЕЦ MAIN'А---------------------;
                                 
                                 ;-------------------- ПРИЁМ/ПЕРЕДАЧА ПО MODBUS----------------;
                                 MODBUS_Communication:
                                 	;/*
0000de 9102                      	ld temp, -Z					; проверка адреса устройства
0000df 9110 014d                 	lds sys, devise_address
0000e1 9301                      	st Z+, temp
0000e2 1301                      	cpse temp, sys
0000e3 c314                      	rjmp Modbus_end
                                   wait_end:
0000e4 9100 0121                 	lds temp, in_flag			; ждать завершения принятого пакета
0000e6 2300                      	and temp,temp
0000e7 f7e1                      	brne wait_end
                                 	
0000e8 94f8                      	cli
0000e9 e0f1                      	ldi ZH, high(in_data)
0000ea e0e0                      	ldi ZL, low(in_data)
0000eb 9100 0120                 	lds temp,in_offset
                                   calc_crc:
0000ed 9131                      	ld msg, Z+
0000ee 930f
0000ef 931f
0000f0 2f03
0000f1 e018
0000f2 2760
0000f3 9556
0000f4 9567
0000f5 f420
0000f6 ea00
0000f7 2750
0000f8 e001
0000f9 2760
0000fa 951a
0000fb f7b9
0000fc 911f
0000fd 910f                      	crc16 msg
0000fe 950a                      	dec temp
0000ff f769                      	brne calc_crc
                                 
000100 e000                      	ldi temp, 0x00				; Проверка CRC
000101 1350                      	cpse CRCHi, temp
000102 c2f5                      	rjmp Modbus_end
000103 1356                      	cpse CRCHi,CRCLo
000104 c2f3                      	rjmp Modbus_end
                                 	;*/
                                   end_receive:
000105 9100 0120                 	lds temp, in_offset			; сформировать число принятых байтов
000107 950a                      	dec temp
000108 950a                      	dec temp
000109 9300 0122                 	sts in_count,temp
                                 
00010b e0f1                      	ldi ZH, high(in_data)	
00010c e0e0                      	ldi ZL, low(in_data)
00010d e0d1                      	ldi YH, high(out_data)
00010e e2c3                      	ldi YL, low(out_data)
                                 ;----------Запись адреса в буфер и определение modbus функции-------;
00010f 9131                      	ld msg,Z+
000110 9339                      	st Y+, msg
000111 9121                      	ld function, Z+
000112 e042                      	ldi lenght, 2
                                 
000113 930f
000114 b70f
000115 930f
000116 931f
000117 933f
000118 935f
000119 936f
00011a 94f8
00011b 3021
00011c f079
00011d 3022
00011e f071
00011f 3023
000120 f069
000121 3024
000122 f061
000123 3025
000124 f059
000125 3026
000126 f059
000127 302f
000128 f041
000129 3120
00012a f041
00012b f441
00012c d008
00012d d055
00012e d0a2
00012f d0d5
000130 d108
000131 d196
000132 d13f
000133 d21c
000134 d253
000135 91b1
000136 91a1
000137 30b0
000138 f479
000139 30a0
00013a f068
00013b 30a4
00013c f458
00013d 9101
00013e 3000
00013f f449
000140 9101
000141 3001
000142 f030
000143 e31e
000144 1b1a
000145 1701
000146 f410
000147 c002
000148 d24d
000149 d25a
00014a 93b0 0145
00014c 93a0 0146
00014e 9300 0149
000150 9329
000151 e010
000152 ef3f
000153 9513
000154 3008
000155 f018
000156 5008
000157 f009
000158 f7d1
000159 9319
00015a 9543
00015b 2f31
00015c 9100 0146
00015e e010
00015f 9513
000160 3008
000161 f018
000162 5008
000163 f009
000164 f7d1
000165 e0b1
000166 e5a3
000167 915d
000168 951a
000169 f7e9
00016a 916d
00016b 3000
00016c f021
00016d 9566
00016e 9557
00016f 950a
000170 f7e1
000171 910e
000172 e000
000173 9110 0149
000175 9408
000176 1f00
000177 951a
000178 f7e1
000179 2350
00017a 9359
00017b 9543
00017c 2f56
00017d 916d
00017e 953a
00017f f7c9
000180 9340 0143
000182 c23d
000183 91b1
000184 91a1
000185 30b0
000186 f479
000187 30a0
000188 f068
000189 34a0
00018a f458
00018b 9101
00018c 3000
00018d f449
00018e 9101
00018f 3001
000190 f030
000191 e31e
000192 1b1a
000193 1701
000194 f410
000195 c002
000196 d1ff
000197 d20c
000198 93b0 0145
00019a 93a0 0146
00019c 9300 0149
00019e 9329
00019f e010
0001a0 ef3f
0001a1 9513
0001a2 3008
0001a3 f018
0001a4 5008
0001a5 f009
0001a6 f7d1
0001a7 9319
0001a8 9543
0001a9 2f31
0001aa 9100 0146
0001ac e010
0001ad 9513
0001ae 3008
0001af f018
0001b0 5008
0001b1 f009
0001b2 f7d1
0001b3 e0b1
0001b4 e9a3
0001b5 915d
0001b6 951a
0001b7 f7e9
0001b8 916d
0001b9 3000
0001ba f021
0001bb 9566
0001bc 9557
0001bd 950a
0001be f7e1
0001bf 910e
0001c0 e000
0001c1 9110 0149
0001c3 9408
0001c4 1f00
0001c5 951a
0001c6 f7e1
0001c7 2350
0001c8 9359
0001c9 9543
0001ca 2f56
0001cb 916d
0001cc 953a
0001cd f7c9
0001ce 9340 0143
0001d0 c1ef
0001d1 91b1
0001d2 91a1
0001d3 30b0
0001d4 f479
0001d5 30a0
0001d6 f068
0001d7 32a0
0001d8 f458
0001d9 9111
0001da 9101
0001db 3010
0001dc f441
0001dd 3001
0001de f030
0001df 2f3a
0001e0 0f30
0001e1 3231
0001e2 f410
0001e3 c002
0001e4 d1b1
0001e5 d1b0
0001e6 93b0 0145
0001e8 93a0 0146
0001ea 9300 0149
0001ec 9329
0001ed 0f00
0001ee 9309
0001ef 9100 0149
0001f1 9543
0001f2 e0b2
0001f3 e1a3
0001f4 9130 0146
0001f6 3030
0001f7 f021
0001f8 911d
0001f9 911d
0001fa 953a
0001fb f7e1
0001fc 911d
0001fd 9319
0001fe 9543
0001ff 911d
000200 9319
000201 9543
000202 950a
000203 f7c1
000204 c1bb
000205 91b1
000206 91a1
000207 30b0
000208 f479
000209 30a0
00020a f068
00020b 32a0
00020c f458
00020d 9111
00020e 9101
00020f 3010
000210 f441
000211 3001
000212 f030
000213 2f3a
000214 0f30
000215 3231
000216 f410
000217 c002
000218 d17d
000219 d17c
00021a 93b0 0145
00021c 93a0 0146
00021e 9300 0149
000220 9329
000221 0f00
000222 9309
000223 9100 0149
000225 9543
000226 e0b1
000227 eda3
000228 9130 0146
00022a 3030
00022b f281
00022c 911d
00022d 911d
00022e 953a
00022f f7e1
000230 911d
000231 9319
000232 9543
000233 911d
000234 9319
000235 9543
000236 950a
000237 f7c1
000238 c187
000239 91b1
00023a 91a1
00023b 30b0
00023c f599
00023d 30a0
00023e f188
00023f 30a6
000240 f578
000241 9111
000242 9101
000243 30a5
000244 f141
000245 3000
000246 f551
000247 3010
000248 f019
000249 3f1f
00024a f009
00024b c025
00024c 9329
00024d 93b9
00024e 9543
00024f 93a9
000250 9543
000251 9319
000252 9543
000253 9309
000254 9543
000255 e061
000256 2f5a
000257 3050
000258 f019
000259 0f66
00025a 955a
00025b f7e9
00025c e0b1
00025d e5a3
00025e 3f1f
00025f f431
000260 910d
000261 2b06
000262 930e
000263 9340 0143
000265 c15a
000266 9560
000267 910d
000268 2306
000269 930e
00026a 9340 0143
00026c c153
00026d 3f1f
00026e f411
00026f cd9f
000270 d125
000271 d132
000272 91b1
000273 91a1
000274 30b0
000275 f439
000276 30a0
000277 f028
000278 32a0
000279 f418
00027a 9111
00027b 9101
00027c c002
00027d d118
00027e d125
00027f 9329
000280 93b9
000281 9543
000282 93a9
000283 9543
000284 9319
000285 9543
000286 9309
000287 9543
000288 2f3a
000289 e0b2
00028a e1a3
00028b 3030
00028c f029
00028d 3031
00028e f091
00028f 3032
000290 f0f9
000291 c02d
000292 3000
000293 f351
000294 3f08
000295 f740
000296 9300 014a
000298 e050
000299 9350 014b
00029b e051
00029c 9350 014c
00029e 9300 014d
0002a0 c01e
0002a1 9150 014f
0002a3 1705
0002a4 f2c8
0002a5 9300 014a
0002a7 e051
0002a8 9350 014b
0002aa e051
0002ab 9350 014c
0002ad 9300 014e
0002af c00f
0002b0 9150 014e
0002b2 1705
0002b3 f650
0002b4 9300 014a
0002b6 e052
0002b7 9350 014b
0002b9 e051
0002ba 9350 014c
0002bc 9300 014f
0002be c000
0002bf 3030
0002c0 f021
0002c1 915d
0002c2 915d
0002c3 953a
0002c4 f7e1
0002c5 931d
0002c6 930d
0002c7 c0f8
0002c8 91b1
0002c9 91a1
0002ca 30b0
0002cb f549
0002cc 30a0
0002cd f138
0002ce 30a5
0002cf f528
0002d0 93b0 0145
0002d2 93a0 0146
0002d4 9101
0002d5 3000
0002d6 f4f9
0002d7 9300 0147
0002d9 9101
0002da 3001
0002db f0d0
0002dc e016
0002dd 1b1a
0002de 1701
0002df f4b0
0002e0 9300 0148
0002e2 9111
0002e3 9310 0149
0002e5 3010
0002e6 f421
0002e7 9513
0002e8 9310 0149
0002ea c00f
0002eb e038
0002ec 9f31
0002ed 1730
0002ee f040
0002ef 5038
0002f0 1730
0002f1 f428
0002f2 9310 0149
0002f4 c005
0002f5 d0a0
0002f6 d0ad
0002f7 d0ba
0002f8 e0b1
0002f9 e5a3
0002fa 9100 0146
0002fc 9110 0148
0002fe 9170 0149
000300 ef3f
000301 9131
000302 3018
000303 f550
000304 915d
000305 3000
000306 f079
000307 9556
000308 9567
000309 950a
00030a f7e1
00030b 9100 0146
00030d 0f66
00030e 1f33
00030f 950a
000310 f7e1
000311 9100 0146
000313 0f55
000314 950a
000315 f7e9
000316 9100 0146
000318 0f01
000319 e018
00031a 1b10
00031b 2f01
00031c 0f33
00031d 950a
00031e f7e9
00031f 2f01
000320 e060
000321 0f55
000322 1f66
000323 950a
000324 f7e1
000325 2f01
000326 9566
000327 9537
000328 950a
000329 f7e1
00032a e0b1
00032b e5a3
00032c 933c
00032d c006
00032e e0b1
00032f e5a3
000330 916d
000331 2363
000332 936e
000333 5018
000334 911f
000335 9110 0149
000337 951a
000338 9310 0149
00033a 931f
00033b f621
00033c 9329
00033d 9100 0145
00033f 9309
000340 9543
000341 9100 0146
000343 9309
000344 9543
000345 9100 0147
000347 9309
000348 9543
000349 9100 0148
00034b 9309
00034c 9543
00034d 9340 0143
00034f c070
000350 91b1
000351 91a1
000352 30b0
000353 f4a1
000354 30a0
000355 f090
000356 32a0
000357 f480
000358 9111
000359 9101
00035a 3010
00035b f469
00035c 3001
00035d f058
00035e 2f3a
00035f 0f30
000360 3231
000361 f438
000362 9131
000363 2f50
000364 0f50
000365 1753
000366 f411
000367 c002
000368 d02d
000369 d02c
00036a 93b0 0145
00036c 93a0 0146
00036e 9330 0149
000370 9329
000371 93b9
000372 9543
000373 93a9
000374 9543
000375 9319
000376 9543
000377 9309
000378 9543
000379 e0b2
00037a e1a3
00037b 9150 0146
00037d 0f55
00037e 3050
00037f f019
000380 916d
000381 955a
000382 f7e9
000383 9161
000384 936d
000385 953a
000386 f7e1
000387 c038
000388 933f
000389 e830
00038a 0f32
00038b 9339
00038c e031
00038d 9339
00038e 9130 0143
000390 9533
000391 9330 0143
000393 9543
000394 913f
000395 c02a
000396 933f
000397 e830
000398 0f32
000399 9339
00039a e032
00039b 9339
00039c 9130 0143
00039e 9533
00039f 9330 0143
0003a1 9543
0003a2 913f
0003a3 c01c
0003a4 933f
0003a5 e830
0003a6 0f32
0003a7 9339
0003a8 e033
0003a9 9339
0003aa 9130 0143
0003ac 9533
0003ad 9330 0143
0003af 9543
0003b0 913f
0003b1 c00e
0003b2 933f
0003b3 e830
0003b4 0f32
0003b5 9339
0003b6 e033
0003b7 9339
0003b8 9130 0143
0003ba 9533
0003bb 9330 0143
0003bd 9543
0003be 913f
0003bf c000
0003c0 916f
0003c1 915f
0003c2 913f
0003c3 911f
0003c4 910f
0003c5 bf0f
0003c6 910f
0003c7 9478                      	Read_Func function
                                 ;----------Начало передачи-----------;
0003c8 9a92                      	sbi PORTD,2
                                 	;
                                 	;cbi PORTD,2
                                 	;ldi XH,high(DO_data)			 ; Выключаем светодиод при передаче
                                 	;ldi XL,low(DO_data)
                                 	;ld temp, X+
                                 	;sbr temp, $10
                                 	;st -X, temp
                                 
0003c9 e0d1                      	ldi YH, high(out_data)
0003ca e2c3                      	ldi YL, low(out_data)
                                 
0003cb 9340 0143                 	sts out_offset, lenght
0003cd ef6f                      	ldi CRCLo, 0xff
0003ce ef5f                      	ldi CRCHi, 0xff
0003cf 9100 0143                 	lds temp, out_offset
                                 	main_loop:					; Передача пакета
0003d1 9139                      	ld msg, Y+
0003d2 930f
0003d3 931f
0003d4 2f03
0003d5 e018
0003d6 2760
0003d7 9556
0003d8 9567
0003d9 f420
0003da ea00
0003db 2750
0003dc e001
0003dd 2760
0003de 951a
0003df f7b9
0003e0 911f
0003e1 910f                      	crc16 msg
0003e2 930f
0003e3 b10b
0003e4 ff05
0003e5 cffd
0003e6 b93c
0003e7 910f                      	USART_Trancieve msg
0003e8 950a                      	dec temp
0003e9 f739                      	brne main_loop
0003ea 2f36                      	mov msg, CRCLo
0003eb 930f
0003ec b10b
0003ed ff05
0003ee cffd
0003ef b93c
0003f0 910f                      	USART_Trancieve msg		; Добавление CRC в передаваемый пакет
0003f1 2f35                      	mov msg, CRCHi
0003f2 930f
0003f3 b10b
0003f4 ff05
0003f5 cffd
0003f6 b93c
0003f7 910f                      	USART_Trancieve msg
                                 	
                                 	;ldi temp, 0x07				; Включение таймера и прерывания по его переполнению 5*256 тактов
                                 	;sts TCCR2, temp
                                 	;ldi temp, 5
                                 	;sts out_flag, temp
                                 
                                 	Modbus_end:					; Сбрасываем память для приёма следующей посылки
0003f8 e000                      	ldi temp,0x00
0003f9 9300 0122                 	sts in_count, temp	
0003fb 9300 0120                 	sts in_offset, temp
0003fd e2c3                      	ldi YL, low(out_data)
0003fe e0d1                          ldi YH, high(out_data)
0003ff e0e0                      	ldi ZL, low(in_data)
000400 e0f1                          ldi ZH, high(in_data)
000401 ef6f                      	ldi CRCLo, 0xff
000402 ef5f                      	ldi CRCHi, 0xff
000403 9478                      	sei
000404 ccac                      rjmp main
                                 
                                 
                                 ADC_Conv_Complete:					; Прерывание по окончанию преобразования
                                 	;cli
000405 930f                      	push r16
000406 b70f                      	in r16, SREG
000407 930f                      	push r16
                                 	;lds razr1,ADCL
000408 b105                      	in r16,ADCH
000409 9300 0150                 	sts temperature, r16
                                 	;sts tmperature_data
                                 
                                 Vix:
                                 	/*ldi temp, 0b01100000
                                 	out ADMUX, temp
                                 	ldi temp, 0b11011100
                                 	out ADCSRA, temp*/
00040b 910f                      	pop r16
00040c bf0f                      	out SREG, r16
00040d 910f                      	pop r16
                                 	;sei
00040e 9518                      reti
                                 
                                 USART_Init:          ; Настройка USART
00040f 94f8                      cli
000410 e000                      	ldi temp, high(UBRR_Value)
000411 bd00                      	out UBRRH, temp
000412 e303                      	ldi temp, low(UBRR_Value)
000413 b909                      	out UBRRL, temp
                                 
                                 	;ldi temp, (1<<UDRE)
                                 	;out UCSRA, temp
000414 e908                      	ldi temp, (1<<TXEN)|(1<<RXEN)|(1<<RXCIE);|(1<<TXCIE0)||(1<< UDRIE0)
000415 b90a                      	out UCSRB, temp
000416 e80e                      	ldi temp,(1<<URSEL)|(3<<UCSZ0)|(1<< USBS)|(0<<UPM1)|(0<<UPM0)
000417 bd00                      	out UCSRC, temp
                                 
000418 9518                      reti
                                 
                                 Temperature_Read:		; Запись значений с термистора в оперативную память
000419 930f                      	push r16
00041a e807                      	ldi temp, 0b10000111
00041b b906                      	out ADCSRA, temp
                                 	;sei
00041c b70f                      	in r16, SREG
00041d 930f                      	push r16
00041e 931f                      	push r17
00041f 932f                      	push r18
                                 
000420 94f8                      	cli
000421 eda3                      	ldi XL,low(AI_data)
000422 e0b1                      	ldi XH,high(AI_data)
000423 e000                      	ldi r16, 0x00
000424 930d                      	st X+, r16
000425 9100 0150                 	lds r16, temperature
000427 930d                      	st X+, r16
000428 e9a3                      	ldi XL,low(DI_data)
000429 e0b1                      	ldi XH,high(DI_data)
00042a 912d                      	ld r18, X+
                                 
00042b 9110 014e                 	lds r17, temperature_min
00042d 1701                      	cp r16,r17
00042e f440                      	brsh temp_over_min
                                 
00042f 9110 014f                 	lds r17, temperature_max
000431 1701                      	cp r16,r17
000432 f040                      	brlo temp_over_max
000433 7f2c                      		andi r18, 0b11111100
000434 e005                      		ldi temp, 5 ;Выключаем таймер
000435 bd05                      		out TCCR2, temp
                                 		;cbi r18,0
                                 		;cbi r18,1
000436 c008                      	rjmp temp_read_end
                                 	temp_over_min:
000437 6021                      		ori r18, 0b00000001
                                 		;andi r18, 0b11111101
                                 		;sbi r18,0
000438 e005                      		ldi temp, 5 ;Включаем таймер
000439 bd05                      		out TCCR2, temp
00043a c004                      		rjmp temp_read_end
                                 	temp_over_max:
00043b 6022                      		ori r18, 0b00000010
                                 		;andi r18, 0b11111110
                                 		;sbi r18,1
00043c e005                      		ldi temp, 5 ;Включаем таймер
00043d bd05                      		out TCCR2,	 temp
00043e c000                      		rjmp temp_read_end
                                 	temp_read_end:
00043f 932e                      	st -X,r18
000440 9478                      	sei
                                 
000441 912f                      	pop r18
000442 911f                      	pop r17
                                 	;cli
000443 ec0f                      	ldi temp, 0b11001111
000444 b906                      	out ADCSRA, temp
                                 	;sei*/
000445 910f                      	pop r16
000446 bf0f                      	out SREG, r16
000447 910f                      	pop r16
000448 9508                      ret
                                 
                                 
                                 ;-------------Прерывание по приёму байта-----------------;
                                 USART_RXC:
000449 930f                      	push r16
00044a b70f                      	in r16, SREG
00044b 930f                      	push r16
00044c 933f                      	push r19
00044d 934f                      	push r20
                                 
00044e 9140 0120                 	lds r20,in_offset
000450 314f                      	cpi r20, BUF_LEN-1
000451 f460                      	brsh RXC_end					; защита на слишком длинный пакет
                                 
000452 b10b                      	in r16, UCSRA
000453 ff07                      	sbrs r16, RXC
000454 cff4                      	rjmp USART_RXC
                                 
                                 	in_setbyte:
000455 b10c                      	in r16, UDR					 ;Запись в буфер приёма
000456 9301                      	st Z+,r16
000457 9543                      	inc r20 
000458 9340 0120                 	sts in_offset, r20
00045a e044                      	ldi r20,READ_TIME 
00045b 9340 0121                 	sts in_flag, r20
00045d c000                      	rjmp RXC_end
                                 
                                 	RXC_end:
00045e 914f                      	pop r20
00045f 913f                      	pop r19
000460 910f                      	pop r16
000461 bf0f                      	out SREG, r16
000462 910f                      	pop r16
000463 9518                      reti
                                 
                                 /*TIMER2_OVF:							; Прерывание по переполнению 2 таймера
                                 	push r20
                                 	in r20, SREG
                                 	push r20
                                 	push r21
                                 	;
                                 	lds r20, out_flag				; Загружаем доп. байт для адекватного времени моргания
                                 	and r20,r20
                                 	breq OVF2_Flag_Null
                                 	dec r20
                                 	sts out_flag, r20
                                 	rjmp OVF2_end
                                   OVF2_Flag_Null:
                                 	;ldi XH,high(DO_data)			
                                 	;ldi XL,low(DO_data)
                                 	;ld r21, X+
                                 	;cbr r21, $10					; Заносим изменение по биту, которое в main передаётся на пин к светодиоду
                                 	;st -X, r21
                                 	ldi r20, 0						; Выключаем счётчик тактов у таймера -> выключаем таймер до необходимого момента
                                 	out TCCR2, r20
                                 	ldi r20, 5						; Заносим небходимое кол-во доп. циклов в доп. байт
                                 	sts out_flag, r20
                                   OVF2_end:
                                 	pop r21
                                 	pop r20
                                 	out SREG, r20
                                 	pop r20
                                 reti*/
                                 
                                 TIMER2_OVF:							; Таймер на проверку перехода температуры
000464 94f8                      	cli
000465 930f                      	push r16
000466 b70f                      	in r16, SREG
000467 930f                      	push r16
                                 
                                 	;ldi r16, 0b11000100
                                 	;out ADCSRA, temp
                                 
000468 931f                      	push r17
000469 932f                      	push r18
                                 	;ldi temp, 0				;Вычключаем таймер
                                 	;out TCCR1B, temp
                                 	;/*
00046a e000                      	ldi r16, 0
00046b bd05                      	out TCCR2, r16
00046c e9a3                      	ldi XL,low(DI_data)
00046d e0b1                      	ldi XH,high(DI_data)
00046e e020                      	ldi r18, 0x00
00046f 9100 0150                 	lds r16, temperature
000471 9110 014f                 	lds r17, temperature_max
                                 
000473 1701                      	cp r16, r17
000474 f028                      	brlo over_max_confirm
000475 9110 014e                 	lds r17, temperature_min
000477 1701                      	cp r16, r17
000478 f428                      	brsh over_min_confirm
                                 
000479 c008                      	rjmp TIMER2_OVF_END
                                 	over_max_confirm:
00047a 911d                      		ld r17, X+
00047b fd11                      		sbrc r17,1
00047c e022                      		ldi r18,0x02
00047d c004                      		rjmp TIMER2_OVF_END
                                 
                                 	over_min_confirm:
00047e 911d                      		ld r17, X+
00047f fd10                      		sbrc r17,0
000480 e021                      		ldi r18,0x01
000481 c000                      		rjmp TIMER2_OVF_END
                                 	TIMER2_OVF_END:
                                 	
                                 	;ldi r16, 0
                                 	;out TCCR2, r16
                                 	; Запись в пямять для индикации
000482 e5a3                      	ldi XL,low(DO_data)
000483 e0b1                      	ldi XH,high(DO_data)
000484 910d                      	ld r16, X+
                                 	;andi r18,0b00000011
                                 	;lsl r18
000485 0f22                      	lsl r18
000486 0f22                      	lsl r18
000487 0f22                      	lsl r18
000488 7e07                      	andi r16, 0b11100111
000489 2b02                      	or r16, r18
00048a 930e                      	st -X,r16
                                 	;*/
                                 
00048b 912f                      	pop r18
00048c 911f                      	pop r17
                                 	;ldi r16, 0b11001001
                                 	;out ADCSRA, temp
00048d 910f                      	pop r16
00048e bf0f                      	out SREG, r16
00048f 910f                      	pop r16
000490 9478                      	sei
000491 9518                      reti
                                 
                                 TIMER0_OVF:							; Прерывание по переполнению 0 таймера - проверка на конец пакета
000492 934f                      	push r20
000493 b74f                      	in r20, SREG
000494 934f                      	push r20
000495 9140 0121                 	lds r20, in_flag				; Цикл 4 раза проходит по времени принятия одного байта, и если новых байт на приёме нет,
000497 2344                      	and r20,r20						; то в in_flag заносится 0,что сигнализирует о окончании пакета
000498 f019                      	breq OVF0_end
000499 954a                      	dec r20
00049a 9340 0121                 	sts in_flag,r20
                                   OVF0_end:
00049c 914f                      	pop r20
00049d bf4f                      	out SREG, r20
00049e 914f                      	pop r20


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8A" register use summary:
x  :  46 y  :  44 z  :  43 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 299 r17: 120 r18:  37 r19: 101 r20:  56 
r21:  55 r22:  37 r23:   1 r24:  39 r25:   0 r26:  59 r27:  42 r28:   4 
r29:   4 r30:   5 r31:   5 
Registers used: 18 out of 35 (51.4%)

"ATmega8A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  12 adiw  :   0 and   :   7 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 breq  :  29 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :  23 brlt  :   0 brmi  :   0 brne  :  57 
brpl  :   0 brsh  :  21 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 
cli   :  12 cln   :   0 clr   :   1 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   1 cp    :  12 cpc   :   0 cpi   :  77 cpse  :   3 
dec   :  32 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  15 inc   :  40 ld    :  69 ldd   :   0 ldi   : 146 
lds   :  46 lpm   :   0 lsl   :   8 lsr   :   6 mov   :  22 movw  :   0 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   2 out   :  50 pop   :  41 push  :  41 rcall :  28 ret   :   1 
reti  :   5 rjmp  :  57 rol   :   4 ror   :   6 sbc   :   0 sbci  :   0 
sbi   :  13 sbic  :   7 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   2 
sbrs  :   4 sec   :   2 seh   :   0 sei   :  12 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :   0 sts   :  63 sub   :   4 subi  :   6 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 47 out of 110 (42.7%)

"ATmega8A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000940   2348      0   2348    8192  28.7%
[.dseg] 0x000060 0x000253      0    339    339    1024  33.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
